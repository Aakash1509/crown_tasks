{
	"info": {
		"_postman_id": "01135dc2-52ec-48b7-9a3d-8a11cffcd606",
		"name": "CRUD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32283581"
	},
	"item": [
		{
			"name": "GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Define the JSON schema\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"status\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"message\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"data\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"id\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"name\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"email\": {\r",
							"                        \"type\": \"string\",\r",
							"                        \"format\": \"email\"\r",
							"                    },\r",
							"                    \"phone\": {\r",
							"                        \"type\": \"string\"\r",
							"                    }\r",
							"                },\r",
							"                \"required\": [\"id\", \"name\", \"email\", \"phone\"]\r",
							"            }\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"status\", \"message\", \"data\"]\r",
							"};\r",
							"\r",
							"// Validate response body against the schema\r",
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv();\r",
							"const validate = ajv.compile(schema);\r",
							"const isValid = validate(pm.response.json());\r",
							"\r",
							"pm.test(\"Schema is valid\", function() {\r",
							"    pm.expect(isValid).to.be.true;\r",
							"});\r",
							"// Validate response status code\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Validate 'status' property\r",
							"pm.test(\"Status is an integer\", function() {\r",
							"    pm.expect(typeof pm.response.json().status).to.eql(\"number\");\r",
							"});\r",
							"\r",
							"// Validate 'message' property\r",
							"pm.test(\"Message is a string\", function() {\r",
							"    pm.expect(typeof pm.response.json().message).to.eql(\"string\");\r",
							"});\r",
							"\r",
							"// Validate 'data' property\r",
							"pm.test(\"Data is an array\", function() {\r",
							"    pm.expect(Array.isArray(pm.response.json().data)).to.be.true;\r",
							"});\r",
							"\r",
							"// Validate each item in 'data' array\r",
							"pm.test(\"Each item in 'data' has id, name, email, and phone properties\", function() {\r",
							"    pm.response.json().data.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property(\"id\");\r",
							"        pm.expect(item).to.have.property(\"name\");\r",
							"        pm.expect(item).to.have.property(\"email\");\r",
							"        pm.expect(item).to.have.property(\"phone\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Validate 'id', 'name', 'email', and 'phone' properties in each item\r",
							"pm.test(\"id, name, email, and phone properties in 'data' are strings\", function() {\r",
							"    pm.response.json().data.forEach(function(item) {\r",
							"        pm.expect(typeof item.id).to.eql(\"string\");\r",
							"        pm.expect(typeof item.name).to.eql(\"string\");\r",
							"        pm.expect(typeof item.email).to.eql(\"string\");\r",
							"        pm.expect(typeof item.phone).to.eql(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Validate email format\r",
							"pm.test(\"Email format is valid\", function() {\r",
							"    pm.response.json().data.forEach(function(item) {\r",
							"        pm.expect(item.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"// Validate required properties\r",
							"pm.test(\"All required properties are present\", function() {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"status\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"data\");\r",
							"    pm.response.json().data.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property(\"id\");\r",
							"        pm.expect(item).to.have.property(\"name\");\r",
							"        pm.expect(item).to.have.property(\"email\");\r",
							"        pm.expect(item).to.have.property(\"phone\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"18\",\r\n    \"name\":\"xyz\",\r\n    \"email\":\"xyz@gmail.com\",\r\n    \"phone\":\"1234567890\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/crownCrud/customers/merge.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"crownCrud",
						"customers",
						"merge.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Define the JSON schema\r",
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"email\": {\r",
							"            \"type\": \"string\",\r",
							"            \"format\": \"email\"\r",
							"        },\r",
							"        \"phone\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"id\", \"name\", \"email\", \"phone\"]\r",
							"};\r",
							"\r",
							"const formData = pm.request.body.formdata.reduce((acc, { key, value }) => {\r",
							"    acc[key] = value;\r",
							"    return acc;\r",
							"}, {});\r",
							"\r",
							"const validate = ajv.compile(schema);\r",
							"const isValid = validate(formData);\r",
							"\r",
							"const isFormData = pm.request.body.mode === 'formdata';\r",
							"\r",
							"pm.test('Request Data Format Check', function () {\r",
							"    pm.expect(isFormData).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Request Data Validation', function () {\r",
							"    pm.expect(isValid).to.be.true;\r",
							"    if (!isValid) {\r",
							"        pm.expect.fail('Request data validation failed');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test('Name length check', function () {\r",
							"    const name = formData.name;\r",
							"    pm.expect(name.length).to.be.within(1, 50);\r",
							"});\r",
							"\r",
							"pm.test('Email format check', function () {\r",
							"    const email = formData.email;\r",
							"    pm.expect(email).to.match(/^.+@.+\\..+$/);\r",
							"});\r",
							"\r",
							"pm.test('Phone number format check', function () {\r",
							"    const phone = formData.phone;\r",
							"    pm.expect(phone).to.match(/^\\d{10}$/);\r",
							"});\r",
							"\r",
							"pm.test('Name is not empty', function () {\r",
							"    const name = formData.name;\r",
							"    pm.expect(name).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test('Email is not empty', function () {\r",
							"    const email = formData.email;\r",
							"    pm.expect(email).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test('Phone number is not empty', function () {\r",
							"    const phone = formData.phone;\r",
							"    pm.expect(phone).to.not.be.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Define the JSON schema\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"status\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"message\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"data\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"id\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"name\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"email\": {\r",
							"                        \"type\": \"string\",\r",
							"                        \"format\": \"email\"\r",
							"                    },\r",
							"                    \"phone\": {\r",
							"                        \"type\": \"string\"\r",
							"                    }\r",
							"                },\r",
							"                \"required\": [\"id\", \"name\", \"email\", \"phone\"]\r",
							"            }\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"status\", \"message\", \"data\"]\r",
							"};\r",
							"\r",
							"// Validate response body against the schema\r",
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv();\r",
							"const validate = ajv.compile(schema);\r",
							"const isValid = validate(pm.response.json());\r",
							"\r",
							"pm.test(\"Schema is valid\", function() {\r",
							"    pm.expect(isValid).to.be.true;\r",
							"});\r",
							"// Validate response status code\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Validate 'status' property\r",
							"pm.test(\"Status is an integer\", function() {\r",
							"    pm.expect(typeof pm.response.json().status).to.eql(\"number\");\r",
							"});\r",
							"\r",
							"// Validate 'message' property\r",
							"pm.test(\"Message is a string\", function() {\r",
							"    pm.expect(typeof pm.response.json().message).to.eql(\"string\");\r",
							"});\r",
							"\r",
							"// Validate 'data' property\r",
							"pm.test(\"Data is an array\", function() {\r",
							"    pm.expect(Array.isArray(pm.response.json().data)).to.be.true;\r",
							"});\r",
							"\r",
							"// Validate each item in 'data' array\r",
							"pm.test(\"Each item in 'data' has id, name, email, and phone properties\", function() {\r",
							"    pm.response.json().data.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property(\"id\");\r",
							"        pm.expect(item).to.have.property(\"name\");\r",
							"        pm.expect(item).to.have.property(\"email\");\r",
							"        pm.expect(item).to.have.property(\"phone\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Validate 'id', 'name', 'email', and 'phone' properties in each item\r",
							"pm.test(\"id, name, email, and phone properties in 'data' are strings\", function() {\r",
							"    pm.response.json().data.forEach(function(item) {\r",
							"        pm.expect(typeof item.id).to.eql(\"string\");\r",
							"        pm.expect(typeof item.name).to.eql(\"string\");\r",
							"        pm.expect(typeof item.email).to.eql(\"string\");\r",
							"        pm.expect(typeof item.phone).to.eql(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Validate email format\r",
							"pm.test(\"Email format is valid\", function() {\r",
							"    pm.response.json().data.forEach(function(item) {\r",
							"        pm.expect(item.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"// Validate required properties\r",
							"pm.test(\"All required properties are present\", function() {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"status\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"data\");\r",
							"    pm.response.json().data.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property(\"id\");\r",
							"        pm.expect(item).to.have.property(\"name\");\r",
							"        pm.expect(item).to.have.property(\"email\");\r",
							"        pm.expect(item).to.have.property(\"phone\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "19",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Aakash",
							"type": "text"
						},
						{
							"key": "email",
							"value": "abc@gmail.com",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "1234567890",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost/crownCrud/customers/merge.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"crownCrud",
						"customers",
						"merge.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"email\": {\r",
							"            \"type\": \"string\",\r",
							"            \"format\": \"email\"\r",
							"        },\r",
							"        \"phone\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"id\", \"name\", \"email\", \"phone\"]\r",
							"};\r",
							"\r",
							"const requestData = JSON.parse(pm.request.body.raw);\r",
							"const validate = ajv.compile(schema);\r",
							"const isValid = validate(requestData);\r",
							"const isRawText = pm.request.body.mode === 'raw';\r",
							"\r",
							"pm.test('Request Data Format Check', function () {\r",
							"    pm.expect(isRawText).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Schema Validation', function () {\r",
							"    pm.expect(isValid).to.be.true;\r",
							"    if (!isValid) {\r",
							"        console.log(ajv.errors);\r",
							"        pm.expect.fail('Schema validation failed');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test('ID is a string', function () {\r",
							"    pm.expect(requestData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test('Name is a string', function () {\r",
							"    pm.expect(requestData.name).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test('Email is in valid format', function () {\r",
							"    pm.expect(requestData.email).to.match(/^.+@.+\\..+$/);\r",
							"});\r",
							"\r",
							"pm.test('Phone is a string', function () {\r",
							"    pm.expect(requestData.phone).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"status\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"const\": 200 \r",
							"        },\r",
							"        \"message\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"status\", \"message\"]\r",
							"};\r",
							"\r",
							"const validate = ajv.compile(schema);\r",
							"const isValid = validate(pm.response.json());\r",
							"\r",
							"pm.test('Response Body Validation', function () {\r",
							"    pm.expect(isValid).to.be.true;\r",
							"    if (!isValid) {\r",
							"        pm.expect.fail('Response body validation failed');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test('Status code is 201', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test('Message is not empty', function () {\r",
							"    const message = pm.response.json().message;\r",
							"    pm.expect(message).to.not.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"20\",\r\n    \"name\":\"Sky\",\r\n    \"email\":\"abc@gmail.com\",\r\n    \"phone\":\"1112224333\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/crownCrud/customers/merge.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"crownCrud",
						"customers",
						"merge.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"id\"]\r",
							"};\r",
							"\r",
							"const requestData = JSON.parse(pm.request.body.raw);\r",
							"const validate = ajv.compile(schema);\r",
							"const isValid = validate(requestData);\r",
							"const isRawText = pm.request.body.mode === 'raw';\r",
							"\r",
							"pm.test('Request Data Format Check', function () {\r",
							"    pm.expect(isRawText).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Schema Validation', function () {\r",
							"    pm.expect(isValid).to.be.true;\r",
							"    if (!isValid) {\r",
							"        console.log(ajv.errors);\r",
							"        pm.expect.fail('Schema validation failed');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test('ID is a string', function () {\r",
							"    pm.expect(requestData.id).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"status\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"const\": 200 \r",
							"        },\r",
							"        \"message\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"status\", \"message\"]\r",
							"};\r",
							"\r",
							"const validate = ajv.compile(schema);\r",
							"const isValid = validate(pm.response.json());\r",
							"\r",
							"pm.test('Response Body Validation', function () {\r",
							"    pm.expect(isValid).to.be.true;\r",
							"    if (!isValid) {\r",
							"        pm.expect.fail('Response body validation failed');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test('Status code is 201', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test('Message is not empty', function () {\r",
							"    const message = pm.response.json().message;\r",
							"    pm.expect(message).to.not.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/crownCrud/customers/merge.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"crownCrud",
						"customers",
						"merge.php"
					]
				}
			},
			"response": []
		}
	]
}