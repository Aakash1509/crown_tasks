{
	"info": {
		"_postman_id": "51cb645a-9208-4845-b55d-969e204348da",
		"name": "MDHostel_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32283581"
	},
	"item": [
		{
			"name": "admin",
			"item": [
				{
					"name": "error_record",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "api_name",
									"value": "https://glexas.com/hostel_data/API/leave/leave_view.php",
									"type": "text"
								},
								{
									"key": "error_code",
									"value": "15",
									"type": "text"
								},
								{
									"key": "message",
									"value": "Access Denied... You are not allowed to access",
									"type": "text"
								},
								{
									"key": "type",
									"value": "FLU",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}admin/error_record.php",
							"host": [
								"{{path}}admin"
							],
							"path": [
								"error_record.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "faqs_details",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}admin/faqs_details.php",
							"host": [
								"{{path}}admin"
							],
							"path": [
								"faqs_details.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "support_details",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "flag",
									"value": "S",
									"type": "text"
								},
								{
									"key": "flag",
									"value": "F",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "SA",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "FA",
									"type": "text",
									"disabled": true
								},
								{
									"key": "support_title",
									"value": "Nothing",
									"type": "text"
								},
								{
									"key": "description",
									"value": "jhssjh",
									"type": "text"
								},
								{
									"key": "user_code",
									"value": "ABCD",
									"type": "text"
								},
								{
									"key": "phone_number",
									"value": "10395103",
									"type": "text"
								},
								{
									"key": "country_code",
									"value": "+91",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}admin/support_details.php",
							"host": [
								"{{path}}admin"
							],
							"path": [
								"support_details.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin_superadmin_pc_queries",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "flag",
									"value": "queries",
									"type": "text"
								},
								{
									"key": "flag",
									"value": "image_change",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "query_request",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "image_change_request",
									"type": "text",
									"disabled": true
								},
								{
									"key": "request",
									"value": "Y",
									"type": "text",
									"disabled": true
								},
								{
									"key": "request",
									"value": "N",
									"type": "text",
									"disabled": true
								},
								{
									"key": "support_main_id",
									"value": "8",
									"type": "text",
									"disabled": true
								},
								{
									"key": "reason",
									"value": "Nothing",
									"type": "text",
									"disabled": true
								},
								{
									"key": "filter_flag",
									"value": "F",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local_path}}admin/admin_superadmin_pc_queries.php",
							"host": [
								"{{local_path}}admin"
							],
							"path": [
								"admin_superadmin_pc_queries.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin_user_list.php",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "flag",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local_path}}admin/admin_user_list.php",
							"host": [
								"{{local_path}}admin"
							],
							"path": [
								"admin_user_list.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "error_record_without_token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "api_name",
									"value": "",
									"type": "text"
								},
								{
									"key": "error_code",
									"value": "",
									"type": "text"
								},
								{
									"key": "message",
									"value": "",
									"type": "text"
								},
								{
									"key": "type",
									"value": "",
									"type": "text"
								},
								{
									"key": "created_by",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}admin/error_record_without_token.php",
							"host": [
								"{{path}}admin"
							],
							"path": [
								"error_record_without_token.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "asset",
			"item": [
				{
					"name": "manager_asset_main",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"asset_main_id\": 67\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}asset/manager_asset_main.php",
							"host": [
								"{{path}}asset"
							],
							"path": [
								"manager_asset_main.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_asset_main",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"asset_main_id\": 67\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}asset/manager_asset_main.php",
							"host": [
								"{{path}}asset"
							],
							"path": [
								"manager_asset_main.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_asset_main",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "asset_use_type",
									"value": "K",
									"type": "text"
								},
								{
									"key": "asset_use_type",
									"value": "O",
									"type": "text",
									"disabled": true
								},
								{
									"key": "asset_use_type",
									"value": "G",
									"type": "text",
									"disabled": true
								},
								{
									"key": "asset_use_type",
									"value": "R",
									"type": "text",
									"disabled": true
								},
								{
									"key": "asset_name",
									"value": "chair",
									"type": "text"
								},
								{
									"key": "description",
									"value": "abcd",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "2",
									"type": "text"
								},
								{
									"key": "price_per_unit",
									"value": "100",
									"type": "text"
								},
								{
									"key": "total_price",
									"value": "200",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}asset/manager_asset_main.php",
							"host": [
								"{{path}}asset"
							],
							"path": [
								"manager_asset_main.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_asset_main",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"asset_main_id\": 67,\r\n    \"asset_use_type\":\"K\",\r\n    \"asset_name\":\"chair\",\r\n    \"description\": \"abcd\",\r\n    \"quantity\": 2,\r\n    \"price_per_unit\": 1,\r\n    \"total_price\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}asset/manager_asset_main.php",
							"host": [
								"{{path}}asset"
							],
							"path": [
								"manager_asset_main.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "attendance",
			"item": [
				{
					"name": "manager_activate_cycle_cd",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{path}}attendance/manager_activate_cycle_cd.php",
							"host": [
								"{{path}}attendance"
							],
							"path": [
								"manager_activate_cycle_cd.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_activate_cycle_cd",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"attendance_detail_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}attendance/manager_activate_cycle_cd.php",
							"host": [
								"{{path}}attendance"
							],
							"path": [
								"manager_activate_cycle_cd.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_attendance_status_r",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}attendance/manager_attendance_status_r.php?attendance_detail_id=1",
							"host": [
								"{{path}}attendance"
							],
							"path": [
								"manager_attendance_status_r.php"
							],
							"query": [
								{
									"key": "attendance_detail_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_deactivate_cycle",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "attendance_detail_id",
									"value": "139",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}attendance/manager_deactivate_cycle.php",
							"host": [
								"{{path}}attendance"
							],
							"path": [
								"manager_deactivate_cycle.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_deactivated_attendance_list_r",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}attendance/manager_deactivated_attendance_list_r.php?to_date=2023-05-20&from_date=2023-05-24",
							"host": [
								"{{path}}attendance"
							],
							"path": [
								"manager_deactivated_attendance_list_r.php"
							],
							"query": [
								{
									"key": "to_date",
									"value": "2023-05-20"
								},
								{
									"key": "from_date",
									"value": "2023-05-24"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_is_cycle_active_r",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}attendance/manager_is_cycle_active_r.php",
							"host": [
								"{{path}}attendance"
							],
							"path": [
								"manager_is_cycle_active_r.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_send_notification",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "flag",
									"value": "parent",
									"type": "text"
								},
								{
									"key": "flag_usertype",
									"value": "O",
									"type": "text"
								},
								{
									"key": "cycle_id",
									"value": "2",
									"type": "text"
								},
								{
									"key": "flag",
									"value": "student",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}attendance/manager_send_notification.php",
							"host": [
								"{{path}}attendance"
							],
							"path": [
								"manager_send_notification.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_student_attendance_status_update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "updated_status",
									"value": "M",
									"type": "text"
								},
								{
									"key": "student_attendance_record_id",
									"value": "12",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}attendance/manager_student_attendance_status_update.php",
							"host": [
								"{{path}}attendance"
							],
							"path": [
								"manager_student_attendance_status_update.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_student_status_list_r",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "filter",
									"value": "M",
									"type": "text"
								},
								{
									"key": "attendance_detail_id",
									"value": "67",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}attendance/manager_student_status_list_r.php",
							"host": [
								"{{path}}attendance"
							],
							"path": [
								"manager_student_status_list_r.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_student_active_leave_list_ru",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{path}}attendance/manager_student_active_leave_list_ru.php?flag=total",
							"host": [
								"{{path}}attendance"
							],
							"path": [
								"manager_student_active_leave_list_ru.php"
							],
							"query": [
								{
									"key": "flag",
									"value": "total"
								},
								{
									"key": "flag",
									"value": "active",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_student_active_leave_list_ru",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"updated_status\":\"M\",\r\n    \"student_attendance_record_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}attendance/manager_student_active_leave_list_ru.php",
							"host": [
								"{{path}}attendance"
							],
							"path": [
								"manager_student_active_leave_list_ru.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "complaint",
			"item": [
				{
					"name": "manager_complaint_status_u",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"complaint_record_id\": 1,\r\n    \"status\": \"R\",\r\n    \"reject_reason\": \"abcd\",\r\n    \"manager_forward\": \"Y\",\r\n    \"staffadmin_forward\": \"Y\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}complaint/manager_complaint_status_u.php",
							"host": [
								"{{path}}complaint"
							],
							"path": [
								"manager_complaint_status_u.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_complaint_type_listview",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}complaint/student_complaint_type_listview_r.php",
							"host": [
								"{{path}}complaint"
							],
							"path": [
								"student_complaint_type_listview_r.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "ms_complaint_crud",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "complaint_title",
									"value": "Technical",
									"type": "text"
								},
								{
									"key": "description",
									"value": "abcd",
									"type": "text"
								},
								{
									"key": "complaint_main_id",
									"value": "3",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}complaint/ms_complaint_crud.php",
							"host": [
								"{{path}}complaint"
							],
							"path": [
								"ms_complaint_crud.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "ms_complaint_crud",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}complaint/ms_complaint_crud.php",
							"host": [
								"{{path}}complaint"
							],
							"path": [
								"ms_complaint_crud.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "ms_complaint_crud",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"complaint_record_id\": 1,\r\n    \"complaint_title\": \"abcd\",\r\n    \"description\": \"efgh\",\r\n    \"manager_forward\": \"A\",\r\n    \"staffadmin_forward\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}complaint/ms_complaint_crud.php",
							"host": [
								"{{path}}complaint"
							],
							"path": [
								"ms_complaint_crud.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "ms_complaint_crud",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"complaint_record_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}complaint/ms_complaint_crud.php",
							"host": [
								"{{path}}complaint"
							],
							"path": [
								"ms_complaint_crud.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "staffadmin_complaint_staff_list_r",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{path}}complaint/staffadmin_complaint_staff_list_r.php?complaint_record_id=247",
							"host": [
								"{{path}}complaint"
							],
							"path": [
								"staffadmin_complaint_staff_list_r.php"
							],
							"query": [
								{
									"key": "complaint_record_id",
									"value": "247"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "dashboard",
			"item": [
				{
					"name": "counsellor_dashboard",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "app_type",
									"value": "W",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}dashboard/counsellor_dashboard.php",
							"host": [
								"{{path}}dashboard"
							],
							"path": [
								"counsellor_dashboard.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_dashboard",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "app_type",
									"value": "W",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local_path}}dashboard/manager_dashboard.php",
							"host": [
								"{{local_path}}dashboard"
							],
							"path": [
								"manager_dashboard.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "missing_info_indication",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{path}}dashboard/missing_info_indication.php",
							"host": [
								"{{path}}dashboard"
							],
							"path": [
								"missing_info_indication.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "parent_dashboard",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "app_type",
									"value": "W",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}dashboard/parent_dashboard.php",
							"host": [
								"{{path}}dashboard"
							],
							"path": [
								"parent_dashboard.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "staff_dashboard",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "app_type",
									"value": "W",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}dashbord/staff_dashbord.php",
							"host": [
								"{{path}}dashbord"
							],
							"path": [
								"staff_dashbord.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_dashboard",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "app_type",
									"value": "W",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}dashboard/student_dashboard.php",
							"host": [
								"{{path}}dashboard"
							],
							"path": [
								"student_dashboard.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "sc_college_department_insert_update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "college_main_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "department_main_id",
									"value": "3",
									"type": "text"
								},
								{
									"key": "college_enrollment_id",
									"value": "42",
									"type": "text"
								},
								{
									"key": "flag",
									"value": "Update",
									"type": "text"
								},
								{
									"key": "student_user_code",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}dashboard/sc_college_department_insert_update.php",
							"host": [
								"{{path}}dashboard"
							],
							"path": [
								"sc_college_department_insert_update.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin_dashboard",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "app_type",
									"value": "W",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}dashbord/admin_dashbord.php",
							"host": [
								"{{path}}dashbord"
							],
							"path": [
								"admin_dashbord.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "fees",
			"item": [
				{
					"name": "msp_receipt_cr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Define the JSON schema\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"user_code\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"title\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"cheque_upi_person\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"type\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"amount\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"mode\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"payment_time\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"first_name\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"last_name\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"next_fees\": {\r",
									"            \"type\": \"string\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"user_code\",\r",
									"          \"title\",\r",
									"          \"cheque_upi_person\",\r",
									"          \"type\",\r",
									"          \"amount\",\r",
									"          \"mode\",\r",
									"          \"payment_time\",\r",
									"          \"first_name\",\r",
									"          \"last_name\",\r",
									"          \"next_fees\"\r",
									"        ]\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\",\r",
									"    \"message\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"// Validate the response schema\r",
									"pm.test('Response should conform to the defined schema', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// Additional tests\r",
									"pm.test('Status code is 200', function() {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response status is true', function() {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.status).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Message is \"Receipt Details\"', function() {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.message).to.eql(\"Receipt Details\");\r",
									"});\r",
									"\r",
									"pm.test('Data array is not empty', function() {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.data.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the value of flag from the URL parameters\r",
									"const fees_record_id = pm.request.url.getQueryString('fees_record_id');\r",
									"\r",
									"// Check if flag is present\r",
									"pm.test('fees_record_id is present in the URL parameters', function() {\r",
									"  pm.expect(fees_record_id).not.to.be.undefined;\r",
									"  pm.expect(fees_record_id).not.to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}fees/msp_receipt_cr.php?fees_record_id=12",
							"host": [
								"{{path}}fees"
							],
							"path": [
								"msp_receipt_cr.php"
							],
							"query": [
								{
									"key": "fees_record_id",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "msp_receipt_cr",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// URL to load the Ajv library\r",
									"const ajvUrl = 'https://cdnjs.cloudflare.com/ajax/libs/ajv/6.12.6/ajv.min.js';\r",
									"\r",
									"// Function to validate date format (YYYY-MM-DD)\r",
									"function isValidDate(dateString) {\r",
									"    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"    return regex.test(dateString);\r",
									"}\r",
									"\r",
									"// Function to validate date-time format (YYYY-MM-DD HH:MM:SS)\r",
									"function isValidDateTime(dateTimeString) {\r",
									"    const regex = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/;\r",
									"    return regex.test(dateTimeString);\r",
									"}\r",
									"\r",
									"// Define the JSON schema\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"fees_record_id\": { \"type\": \"integer\" },\r",
									"        \"payment_date\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"        \"amount_paid\": { \"type\": \"integer\" },\r",
									"        \"cheque_upi_person\": { \"type\": \"string\" },\r",
									"        \"title\": { \"type\": \"string\" },\r",
									"        \"pay_via\": { \"type\": \"string\", \"enum\": [\"CHEQUE\", \"UPI\", \"CASH\", \"BANK\"] },\r",
									"        \"cheque_date\": { \"type\": \"string\", \"format\": \"date\" } // <-- Changed format to \"date\"\r",
									"    },\r",
									"    \"required\": [\"fees_record_id\", \"payment_date\", \"amount_paid\", \"cheque_upi_person\", \"title\", \"pay_via\", \"cheque_date\"]\r",
									"};\r",
									"\r",
									"// Fetch Ajv library\r",
									"pm.sendRequest(ajvUrl, (error, response) => {\r",
									"    if (error) {\r",
									"        pm.test(\"Load Ajv library\", function () {\r",
									"            pm.expect(error).to.be.null;\r",
									"        });\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Evaluate the Ajv library\r",
									"    eval(response.text());\r",
									"\r",
									"    // Initialize Ajv\r",
									"    const ajv = new Ajv();\r",
									"    ajv.addFormat('date-time', isValidDateTime);\r",
									"    ajv.addFormat('date', isValidDate);\r",
									"\r",
									"    // Get form data\r",
									"    const formData = {\r",
									"        \"fees_record_id\": parseInt(pm.variables.get(\"fees_record_id\")),\r",
									"        \"payment_date\": pm.variables.get(\"payment_date\"),\r",
									"        \"amount_paid\": parseInt(pm.variables.get(\"amount_paid\")),\r",
									"        \"cheque_upi_person\": pm.variables.get(\"cheque_upi_person\"),\r",
									"        \"title\": pm.variables.get(\"title\"),\r",
									"        \"pay_via\": pm.variables.get(\"pay_via\"),\r",
									"        \"cheque_date\": pm.variables.get(\"cheque_date\")\r",
									"    };\r",
									"\r",
									"    // Validate form data against the schema\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(formData);\r",
									"\r",
									"    pm.test(\"Form data validation\", function () {\r",
									"        pm.expect(valid).to.be.true;\r",
									"\r",
									"        if (!valid) {\r",
									"            pm.test(\"Form data validation errors\", function () {\r",
									"                pm.expect(validate.errors).to.be.empty;\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check if the status is true\r",
									"    pm.expect(jsonData.status).to.be.true;\r",
									"    \r",
									"    // Check if the message is \"Fees Request Sent Successfully...\"\r",
									"    pm.expect(jsonData.message).to.eql(\"Fees Request Sent Successfully...\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "payment_date",
									"value": "2024-04-08 12:00:00",
									"type": "text"
								},
								{
									"key": "amount_paid",
									"value": "50",
									"type": "text"
								},
								{
									"key": "pay_via",
									"value": "CHEQUE",
									"type": "text"
								},
								{
									"key": "cheque_upi_person",
									"value": "123456",
									"type": "text"
								},
								{
									"key": "title",
									"value": "glexas1",
									"type": "text"
								},
								{
									"key": "from_date",
									"value": "2023-05-08",
									"type": "text",
									"disabled": true
								},
								{
									"key": "to_date",
									"value": "2023-05-08",
									"type": "text",
									"disabled": true
								},
								{
									"key": "fees_record_id",
									"value": "12",
									"type": "text"
								},
								{
									"key": "cheque_date",
									"value": "2024-04-08",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}fees/msp_receipt_cr.php",
							"host": [
								"{{path}}fees"
							],
							"path": [
								"msp_receipt_cr.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_term_cr",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the JSON schema\r",
									"const Ajv = require('ajv');\r",
									"\r",
									"// Define the JSON schema\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"term_title\": { \"type\": \"string\" },\r",
									"        \"fees_data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"user_code\": { \"type\": \"string\" },\r",
									"                    \"student_fees\": { \"type\": \"number\" }\r",
									"                },\r",
									"                \"required\": [\"user_code\", \"student_fees\"]\r",
									"            }\r",
									"        },\r",
									"        \"fees_sdate\": { \"type\": \"string\", \"format\": \"date\" },\r",
									"        \"fees_edate\": { \"type\": \"string\", \"format\": \"date\" },\r",
									"        \"total_fees\": { \"type\": \"number\" }\r",
									"    },\r",
									"    \"required\": [\"term_title\", \"fees_data\", \"fees_sdate\", \"fees_edate\", \"total_fees\"]\r",
									"};\r",
									"\r",
									"// Validate the form data against the schema\r",
									"const jsonData = pm.request.body.toJSON();\r",
									"const ajv = new Ajv();\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(jsonData);\r",
									"\r",
									"if (!valid) {\r",
									"    const errors = validate.errors.map(error => error.message);\r",
									"    pm.environment.set(\"validationErrors\", JSON.stringify(errors));\r",
									"} else {\r",
									"    pm.environment.set(\"validationErrors\", \"[]\"); // Set as empty array if validation passed\r",
									"}\r",
									"pm.test(\"Form data validation\", function() {\r",
									"    const errors = pm.environment.get(\"validationErrors\");\r",
									"    if (errors) {\r",
									"        console.error(\"Validation errors:\", JSON.parse(errors));\r",
									"        pm.expect(errors).to.be.empty;\r",
									"    } else {\r",
									"        console.log(\"Validation passed\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status is true\", function () {\r",
									"    pm.response.to.have.jsonBody('status', true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is 'Insert Operation Successfully'\", function () {\r",
									"    pm.response.to.have.jsonBody('message', 'Insert Operation Successfully');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "term_title",
									"value": "uhfknacsn",
									"type": "text"
								},
								{
									"key": "fees_data",
									"value": "[{\"user_code\": \"Student1\",\"student_fees\": 1000},{\"user_code\": \"Student2\",\"student_fees\": 2000},{\"user_code\": \"Student3\",\"student_fees\": 3000}]",
									"type": "text"
								},
								{
									"key": "fees_sdate",
									"value": "2022-01-15",
									"type": "text"
								},
								{
									"key": "fees_edate",
									"value": "2022-05-15",
									"type": "text"
								},
								{
									"key": "total_fees",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}fees/manager_term_cr.php",
							"host": [
								"{{path}}fees"
							],
							"path": [
								"manager_term_cr.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_term_cr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": { \"type\": \"boolean\" },\r",
									"    \"message\": { \"type\": \"string\" },\r",
									"    \"fees_sdate\": { \"type\": \"string\", \"format\": \"date\" },\r",
									"    \"fees_edate\": { \"type\": \"string\", \"format\": \"date\" },\r",
									"    \"total_fees\": { \"type\": \"string\" },\r",
									"    \"user_count\": { \"type\": \"string\" },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"term_title\": { \"type\": \"string\" },\r",
									"          \"fees_sdate\": { \"type\": \"string\", \"format\": \"date\" },\r",
									"          \"fees_edate\": { \"type\": \"string\", \"format\": \"date\" },\r",
									"          \"total_fees\": { \"type\": \"string\" },\r",
									"          \"mess_fees\": { \"type\": \"string\" },\r",
									"          \"fees_detail_id\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"term_title\", \"fees_sdate\", \"fees_edate\", \"total_fees\", \"mess_fees\", \"fees_detail_id\"]\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"status\", \"message\", \"fees_sdate\", \"fees_edate\", \"total_fees\", \"user_count\", \"data\"]\r",
									"};\r",
									"\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(response);\r",
									"\r",
									"if (!valid) {\r",
									"  console.log(validate.errors);\r",
									"}\r",
									"\r",
									"pm.test('Schema validation', function() {\r",
									"  pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
									"});\r",
									"\r",
									"// Additional Test Cases\r",
									"\r",
									"// 1. Status and Message Validation\r",
									"pm.test('Status is boolean', function() {\r",
									"  pm.expect(response.status).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"pm.test('Message is a string', function() {\r",
									"  pm.expect(response.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"// 2. Date Format Validation\r",
									"pm.test('fees_sdate is a valid date', function() {\r",
									"  pm.expect(new Date(response.fees_sdate).toString()).not.to.equal('Invalid Date');\r",
									"});\r",
									"\r",
									"pm.test('fees_edate is a valid date', function() {\r",
									"  pm.expect(new Date(response.fees_edate).toString()).not.to.equal('Invalid Date');\r",
									"});\r",
									"\r",
									"// 3. Total Fees and User Count Validation\r",
									"pm.test('total_fees is a string', function() {\r",
									"  pm.expect(response.total_fees).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('user_count is a string', function() {\r",
									"  pm.expect(response.user_count).to.be.a('string');\r",
									"});\r",
									"\r",
									"// 4. Data Array Validation\r",
									"pm.test('Data is an array', function() {\r",
									"  pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://glexas.com/hostel_data/API/fees/manager_term_cr.php",
							"protocol": "https",
							"host": [
								"glexas",
								"com"
							],
							"path": [
								"hostel_data",
								"API",
								"fees",
								"manager_term_cr.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_term_student_crud",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(pm.request.body.raw);\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"fees_detail_id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"user_code\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"fees_detail_id\", \"user_code\"]\r",
									"};\r",
									"\r",
									"pm.test('Request body is valid', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is true\", function () {\r",
									"    pm.response.to.have.jsonBody('status', true);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is 'Deleted Successfully'\", function () {\r",
									"    pm.response.to.have.jsonBody('message', 'Deleted Successfully');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fees_detail_id\": 1,\r\n    \"user_code\": \"Student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}fees/manager_term_student_crud.php",
							"host": [
								"{{path}}fees"
							],
							"path": [
								"manager_term_student_crud.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_term_student_crud",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the JSON schema\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"fees_record_id\": { \"type\": \"integer\" },\r",
									"    \"user_code\": { \"type\": \"string\", \"enum\": [\"Student\"] },\r",
									"    \"fees_sdate\": { \"type\": \"string\", \"format\": \"date\" },\r",
									"    \"fees_edate\": { \"type\": \"string\", \"format\": \"date\" },\r",
									"    \"total_fees\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"fees_record_id\", \"user_code\", \"fees_sdate\", \"fees_edate\", \"total_fees\"]\r",
									"};\r",
									"\r",
									"// Validate the incoming form data against the schema\r",
									"var jsonData = pm.request.body.formdata.toJSON();\r",
									"var valid = tv4.validate(jsonData, schema);\r",
									"\r",
									"// Log validation result\r",
									"if (!valid) {\r",
									"  console.log(\"Validation failed:\", tv4.error);\r",
									"  pm.environment.set(\"stopRequest\", true); // Set a variable to stop the request\r",
									"}\r",
									"if (pm.environment.get(\"stopRequest\")) {\r",
									"  pm.test.skip(\"Request stopped due to validation failure\");\r",
									"  return;\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status is true\", function () {\r",
									"    pm.response.to.have.jsonBody('status', true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is 'Insert Operation Successfully'\", function () {\r",
									"    pm.response.to.have.jsonBody('message', 'Insert Operation Successfully');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fees_detail_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "user_code",
									"value": "Student",
									"type": "text"
								},
								{
									"key": "fees_sdate",
									"value": "2024-05-13",
									"type": "text"
								},
								{
									"key": "fees_edate",
									"value": "2024-09-13",
									"type": "text"
								},
								{
									"key": "total_fees",
									"value": "10000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}fees/manager_term_student_crud.php",
							"host": [
								"{{path}}fees"
							],
							"path": [
								"manager_term_student_crud.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_term_student_crud",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the value of fees_record_id from the URL parameters\r",
									"const feesRecordId = pm.request.url.getQueryString('fees_record_id');\r",
									"\r",
									"// Check if fees_record_id is present\r",
									"pm.test('fees_record_id is present in the URL parameters', function() {\r",
									"  pm.expect(feesRecordId).not.to.be.undefined;\r",
									"  pm.expect(feesRecordId).not.to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Define the schema\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": { \"type\": \"boolean\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"photo\": { \"type\": \"string\" },\r",
									"                    \"user_code\": { \"type\": \"string\" },\r",
									"                    \"first_name\": { \"type\": \"string\" },\r",
									"                    \"last_name\": { \"type\": \"string\" },\r",
									"                    \"mobile_number\": { \"type\": \"string\" },\r",
									"                    \"fees_detail_id\": { \"type\": \"string\" },\r",
									"                    \"fees_sdate\": { \"type\": \"string\" },\r",
									"                    \"fees_edate\": { \"type\": \"string\" },\r",
									"                    \"total_fees\": { \"type\": \"string\" },\r",
									"                    \"mess_fees\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"photo\",\r",
									"                    \"user_code\",\r",
									"                    \"first_name\",\r",
									"                    \"last_name\",\r",
									"                    \"mobile_number\",\r",
									"                    \"fees_detail_id\",\r",
									"                    \"fees_sdate\",\r",
									"                    \"fees_edate\",\r",
									"                    \"total_fees\",\r",
									"                    \"mess_fees\"\r",
									"                ]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"status\", \"message\", \"data\"]\r",
									"};\r",
									"\r",
									"// Test the response against the schema\r",
									"pm.test(\"Response should match schema\", function () {\r",
									"    pm.response.to.have.jsonBody(schema);\r",
									"});\r",
									"\r",
									"// Additional test cases\r",
									"pm.test(\"Status should be true\", function () {\r",
									"    pm.expect(pm.response.json().status).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Message should be a non-empty string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.be.a(\"string\").and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Each item should have user_code 'Student11'\", function () {\r",
									"    pm.response.json().data.forEach(function (item) {\r",
									"        pm.expect(item.user_code).to.equal(\"Student11\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Data should contain at least one item\", function () {\r",
									"    pm.expect(pm.response.json().data.length).to.be.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Each item should have a non-empty 'total_fees'\", function () {\r",
									"    pm.response.json().data.forEach(function (item) {\r",
									"        pm.expect(item.total_fees).to.be.a(\"string\").and.to.not.be.empty;\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{path}}fees/manager_term_student_crud.php?fees_detail_id=1",
							"host": [
								"{{path}}fees"
							],
							"path": [
								"manager_term_student_crud.php"
							],
							"query": [
								{
									"key": "fees_detail_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_term_student_crud",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the schema for validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"fees_detail_id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"user_code\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"Student\", \"Teacher\", \"Parent\", \"Staff\"]\r",
									"        },\r",
									"        \"fees_sdate\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date\"\r",
									"        },\r",
									"        \"fees_edate\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date\"\r",
									"        },\r",
									"        \"total_fees\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"fees_detail_id\", \"user_code\", \"fees_sdate\", \"fees_edate\", \"total_fees\"]\r",
									"};\r",
									"\r",
									"// Parse the raw request body as JSON\r",
									"var jsonData = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"// Validate the request body against the schema\r",
									"pm.test('Request body is valid', function() {\r",
									"    var isValid = tv4.validate(jsonData, schema);\r",
									"    pm.expect(isValid).to.be.true;\r",
									"});\r",
									"\r",
									"// Check Required Fields\r",
									"pm.test('Required fields are present', function() {\r",
									"    pm.expect(jsonData).to.have.property('fees_detail_id');\r",
									"    pm.expect(jsonData).to.have.property('user_code');\r",
									"    pm.expect(jsonData).to.have.property('fees_sdate');\r",
									"    pm.expect(jsonData).to.have.property('fees_edate');\r",
									"    pm.expect(jsonData).to.have.property('total_fees');\r",
									"});\r",
									"\r",
									"// Check Field Types\r",
									"pm.test('Field types are correct', function() {\r",
									"    pm.expect(jsonData.fees_detail_id).to.be.a('number');\r",
									"    pm.expect(jsonData.user_code).to.be.oneOf(['Student', 'Teacher', 'Parent', 'Staff']);\r",
									"    pm.expect(jsonData.fees_sdate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/); // Date format check\r",
									"    pm.expect(jsonData.fees_edate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/); // Date format check\r",
									"    pm.expect(jsonData.total_fees).to.be.a('number');\r",
									"});\r",
									"\r",
									"// Check Enum Value\r",
									"pm.test('user_code is one of the allowed values', function() {\r",
									"    pm.expect(jsonData.user_code).to.be.oneOf(['Student', 'Teacher', 'Parent', 'Staff']);\r",
									"});\r",
									"\r",
									"// Check Total Fees Range\r",
									"pm.test('total_fees is within valid range', function() {\r",
									"    pm.expect(jsonData.total_fees).to.be.at.least(0); // Check if total_fees is non-negative\r",
									"    // Add additional checks for the maximum value if needed\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status is true\", function() {\r",
									"    pm.expect(pm.response.json().status).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Check message is 'Updated Successfully'\", function() {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Updated Successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fees_detail_id\": 1,\r\n    \"user_code\": \"Student\",\r\n    \"fees_sdate\": \"2024-05-13\",\r\n    \"fees_edate\": \"2024-09-13\",\r\n    \"total_fees\": 10000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}fees/manager_term_student_crud.php",
							"host": [
								"{{path}}fees"
							],
							"path": [
								"manager_term_student_crud.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "msp_student_term_list_r",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the value of user_code from the URL parameters\r",
									"const userCode = pm.request.url.getQueryString('user_code');\r",
									"\r",
									"// Check if user_code is present\r",
									"pm.test('user_code is present in the URL parameters', function() {\r",
									"  pm.expect(userCode).not.to.be.undefined;\r",
									"  pm.expect(userCode).not.to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// JSON Schema\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": { \"type\": \"boolean\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"fees_record_id\": { \"type\": \"string\" },\r",
									"                    \"user_code\": { \"type\": \"string\" },\r",
									"                    \"fees_sdate\": { \"type\": \"string\" },\r",
									"                    \"fees_edate\": { \"type\": \"string\" },\r",
									"                    \"deposit\": { \"type\": \"string\" },\r",
									"                    \"total_fees\": { \"type\": \"string\" },\r",
									"                    \"mess_pending\": { \"type\": \"string\" },\r",
									"                    \"mess_fees\": { \"type\": \"string\" },\r",
									"                    \"paid_fees\": { \"type\": \"string\" },\r",
									"                    \"mess_paid\": { \"type\": \"string\" },\r",
									"                    \"pending_fees\": { \"type\": \"string\" },\r",
									"                    \"next_fees\": { \"type\": \"string\" },\r",
									"                    \"term_title\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"fees_record_id\",\r",
									"                    \"user_code\",\r",
									"                    \"fees_sdate\",\r",
									"                    \"fees_edate\",\r",
									"                    \"deposit\",\r",
									"                    \"total_fees\",\r",
									"                    \"mess_pending\",\r",
									"                    \"mess_fees\",\r",
									"                    \"paid_fees\",\r",
									"                    \"mess_paid\",\r",
									"                    \"pending_fees\",\r",
									"                    \"next_fees\",\r",
									"                    \"term_title\"\r",
									"                ]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"status\", \"message\", \"data\"]\r",
									"};\r",
									"\r",
									"// Test Cases\r",
									"pm.test(\"Response should be a valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should adhere to the schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status should be true\", function () {\r",
									"    pm.expect(pm.response.json().status).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be a string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item in data array should have fees_record_id as a string\", function () {\r",
									"    pm.response.json().data.forEach(function (item) {\r",
									"        pm.expect(item.fees_record_id).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each item in data array should have user_code as a string\", function () {\r",
									"    pm.response.json().data.forEach(function (item) {\r",
									"        pm.expect(item.user_code).to.be.a('string');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}fees/msp_student_term_list_r.php?user_code=Student5",
							"host": [
								"{{path}}fees"
							],
							"path": [
								"msp_student_term_list_r.php"
							],
							"query": [
								{
									"key": "user_code",
									"value": "Student5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_cheque_ru",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the value of flag from the URL parameters\r",
									"const flag = pm.request.url.getQueryString('flag');\r",
									"\r",
									"// Check if flag is present\r",
									"pm.test('flag is present in the URL parameters', function() {\r",
									"  pm.expect(flag).not.to.be.undefined;\r",
									"  pm.expect(flag).not.to.be.null;\r",
									"});\r",
									"// Get the value of flag from the URL parameters\r",
									"const cheque_status = pm.request.url.getQueryString('cheque_status');\r",
									"\r",
									"// Check if flag is present\r",
									"pm.test('cheque_status is present in the URL parameters', function() {\r",
									"  pm.expect(cheque_status).not.to.be.undefined;\r",
									"  pm.expect(cheque_status).not.to.be.null;\r",
									"});\r",
									"\r",
									"// Get the value of flag from the URL parameters\r",
									"const from_date = pm.request.url.getQueryString('from_date');\r",
									"\r",
									"// Check if flag is present\r",
									"pm.test('from_date is present in the URL parameters', function() {\r",
									"  pm.expect(from_date).not.to.be.undefined;\r",
									"  pm.expect(from_date).not.to.be.null;\r",
									"});\r",
									"\r",
									"// Get the value of flag from the URL parameters\r",
									"const to_date = pm.request.url.getQueryString('to_date');\r",
									"\r",
									"// Check if flag is present\r",
									"pm.test('to_date is present in the URL parameters', function() {\r",
									"  pm.expect(to_date).not.to.be.undefined;\r",
									"  pm.expect(to_date).not.to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Define the schema\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": { \"type\": \"boolean\" },\r",
									"    \"message\": { \"type\": \"string\" },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"cheque_upi_person\": { \"type\": \"string\" },\r",
									"          \"amount\": { \"type\": \"number\" },\r",
									"          \"student_name\": { \"type\": \"string\" },\r",
									"          \"term_title\": { \"type\": \"string\" },\r",
									"          \"fees_sdate\": { \"type\": \"string\", \"format\": \"date\" },\r",
									"          \"fees_edate\": { \"type\": \"string\", \"format\": \"date\" },\r",
									"          \"Payment_date\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"          \"transaction_record_id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"cheque_upi_person\", \"amount\", \"student_name\", \"term_title\", \"fees_sdate\", \"fees_edate\", \"Payment_date\", \"transaction_record_id\"]\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"status\", \"message\", \"data\"]\r",
									"};\r",
									"\r",
									"// Validate the response body against the schema, skipping if it starts with '<br />'\r",
									"pm.test('Response body matches schema', function() {\r",
									"  const responseBody = pm.response.text();\r",
									"  if (responseBody.startsWith('<br />')) {\r",
									"    console.log('Response is not valid JSON, skipping schema validation.');\r",
									"    return;\r",
									"  }\r",
									"  pm.expect(tv4.validate(responseBody, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Empty Response Body', function() {\r",
									"  const responseBody = pm.response.text();\r",
									"  if (responseBody.trim() === '' || responseBody.startsWith('<br />')) {\r",
									"    console.log('Response is empty or contains HTML, skipping test.');\r",
									"    pm.expect(true).to.be.true; // skip the test\r",
									"    return;\r",
									"  }\r",
									"  pm.expect(responseBody).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test('Invalid JSON Response', function() {\r",
									"  const responseBody = pm.response.text();\r",
									"  if (responseBody.trim() === '' || responseBody.startsWith('<br />')) {\r",
									"    console.log('Response is empty or contains HTML, skipping test.');\r",
									"    pm.expect(true).to.be.true; // skip the test\r",
									"    return;\r",
									"  }\r",
									"  pm.expect(responseBody).to.not.be.json;\r",
									"});\r",
									"\r",
									"pm.test('Response contains specific data', function() {\r",
									"  const responseBody = pm.response.text();\r",
									"  if (responseBody.startsWith('<br />')) {\r",
									"    console.log('Response is not valid JSON, skipping test.');\r",
									"    pm.expect(true).to.be.true; // skip the test\r",
									"    return;\r",
									"  }\r",
									"  const jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.data[0].student_name).to.equal('soham ccc');\r",
									"});\r",
									"\r",
									"pm.test('Response does not contain a required field', function() {\r",
									"  const responseBody = pm.response.text();\r",
									"  if (responseBody.startsWith('<br />')) {\r",
									"    console.log('Response is not valid JSON, skipping test.');\r",
									"    pm.expect(true).to.be.true; // skip the test\r",
									"    return;\r",
									"  }\r",
									"  const jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.data[0]).to.not.have.property('missing_field');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{path}}fees/manager_cheque_ru.php?flag=cheque",
							"host": [
								"{{path}}fees"
							],
							"path": [
								"manager_cheque_ru.php"
							],
							"query": [
								{
									"key": "flag",
									"value": "cheque"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_cheque_ru",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.request.body && pm.request.body.formdata) {\r",
									"    const transactionRecordId = pm.request.body.formdata.get(\"transaction_record_id\");\r",
									"    const verified = pm.request.body.formdata.get(\"verified\");\r",
									"\r",
									"    const jsonData = {\r",
									"        \"transaction_record_id\": transactionRecordId,\r",
									"        \"verified\": verified\r",
									"    };\r",
									"\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"transaction_record_id\": { \"type\": \"integer\" },\r",
									"            \"verified\": { \"type\": \"string\", \"enum\": [\"Y\", \"N\"] }\r",
									"        },\r",
									"        \"required\": [\"transaction_record_id\", \"verified\"]\r",
									"    };\r",
									"\r",
									"    pm.variables.set(\"jsonData\", JSON.stringify(jsonData));\r",
									"    pm.variables.set(\"schema\", JSON.stringify(schema));\r",
									"} else {\r",
									"    console.log(\"Form data is missing in the request body.\");\r",
									"    pm.variables.set(\"jsonData\", \"{}\");\r",
									"    pm.variables.set(\"schema\", \"{}\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status is true\r",
									"if (responseBody.status === true) {\r",
									"    // Log the success message\r",
									"    console.log(\"Response status is true. Message: \" + responseBody.message);\r",
									"    // You can perform additional actions here if needed\r",
									"} else {\r",
									"    // Log an error message if the status is false\r",
									"    console.log(\"Response status is false. Message: \" + responseBody.message);\r",
									"}\r",
									"pm.test(\"Response has a status field\", function () {\r",
									"    pm.response.to.have.jsonBody('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a message field\", function () {\r",
									"    pm.response.to.have.jsonBody('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Status is true\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transaction_record_id\": 6,\r\n    \"verified\":\"Y\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}fees/manager_cheque_ru.php",
							"host": [
								"{{path}}fees"
							],
							"path": [
								"manager_cheque_ru.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "food",
			"item": [
				{
					"name": "manager_food_count_add_delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "meal_type",
									"value": "D",
									"type": "text"
								},
								{
									"key": "date",
									"value": "2023-05-15",
									"type": "text"
								},
								{
									"key": "option",
									"value": "N",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}food/manager_food_count_add_delete.php",
							"host": [
								"{{path}}food"
							],
							"path": [
								"manager_food_count_add_delete.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_temp_food_menu_add_update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "flag",
									"value": "Delete",
									"type": "text"
								},
								{
									"key": "day_name",
									"value": "2023-05-04",
									"type": "text"
								},
								{
									"key": "menu",
									"value": "butter masala 2",
									"type": "text"
								},
								{
									"key": "meal_time",
									"value": "L",
									"type": "text"
								},
								{
									"key": "food_menu_change_main_id",
									"value": "63",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}food/manager_temp_food_menu_add_update.php",
							"host": [
								"{{path}}food"
							],
							"path": [
								"manager_temp_food_menu_add_update.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_food_feedback",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "day_name",
									"value": "4",
									"type": "text"
								},
								{
									"key": "meal_type",
									"value": "L",
									"type": "text"
								},
								{
									"key": "review",
									"value": "4",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "Nice",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}food/student_food_feedback.php",
							"host": [
								"{{path}}food"
							],
							"path": [
								"student_food_feedback.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_food_menu_view",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "date",
									"value": "2023-05-20",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}food/student_food_menu_view.php",
							"host": [
								"{{path}}food"
							],
							"path": [
								"student_food_menu_view.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_student_food_count",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "date",
									"value": "2023-05-16",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}food/manager_student_food_count.php",
							"host": [
								"{{path}}food"
							],
							"path": [
								"manager_student_food_count.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_food_menu_view",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}food/manager_food_menu_view.php",
							"host": [
								"{{path}}food"
							],
							"path": [
								"manager_food_menu_view.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_food_menu_main_add_update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "flag",
									"value": "Add",
									"type": "text"
								},
								{
									"key": "day_name",
									"value": "Monday",
									"type": "text"
								},
								{
									"key": "breakfast",
									"value": "abcd",
									"type": "text"
								},
								{
									"key": "lunch",
									"value": "efgh",
									"type": "text"
								},
								{
									"key": "dinner",
									"value": "ijkl",
									"type": "text"
								},
								{
									"key": "food_menu_main_id",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "Update",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}food/manager_food_menu_main_add_update.php",
							"host": [
								"{{path}}food"
							],
							"path": [
								"manager_food_menu_main_add_update.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_staff_qr_insert.php",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "day_name",
									"value": "2023-05-15",
									"type": "text"
								},
								{
									"key": "meal_type",
									"value": "L",
									"type": "text"
								},
								{
									"key": "user_code",
									"value": "Student11",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}food/student_staff_qr_insert.php",
							"host": [
								"{{path}}food"
							],
							"path": [
								"student_staff_qr_insert.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_food_count_add_delete.php",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "meal_type",
									"value": "D",
									"type": "text"
								},
								{
									"key": "date",
									"value": "2023-05-11",
									"type": "text"
								},
								{
									"key": "option",
									"value": "Y",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}food/student_food_count_add_delete.php",
							"host": [
								"{{path}}food"
							],
							"path": [
								"student_food_count_add_delete.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "general",
			"item": [
				{
					"name": "sidebar.php",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "app_type",
									"value": "F",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}general/sidebar.php",
							"host": [
								"{{path}}general"
							],
							"path": [
								"sidebar.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_sidebar.php",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{path}}general/user_info_sidebar.php",
							"host": [
								"{{path}}general"
							],
							"path": [
								"user_info_sidebar.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "hostel_info.php",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{path}}general/hostel_info.php",
							"host": [
								"{{path}}general"
							],
							"path": [
								"hostel_info.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "parameter.php",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "flag",
									"value": "mobile_number",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "otp_flag",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "registration_image_path",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "food_menu_type",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "complaint_complaint_edit_time",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "complaint_staff_view_flag",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "security_leave_location",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "fees_duration",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "fees_breakup",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "fees_startdate",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "fees_monthbreak",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "food_food_count_duration",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "security_parent_leave_location",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "security_counsellor_leave_location",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "security_manager_leave_location",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "skip_captcha",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "location",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}general/parameter.php",
							"host": [
								"{{path}}general"
							],
							"path": [
								"parameter.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "hostel_info_detail",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlJhaiBaYWxhdmFkaXlhIiwibWVzc2FnZSI6IjE3MTU3NzI0NDcuNzgwOXJhajY2NDQ5YzFmYmVhNmRqYXIxNzE1NzcyNDQ3Ljc4MDkifQ==.KAwrrQx8T6cZ9Ek6RAjXEi+bofXP5MeOCWV4XWWpkjo=",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://glexas.com/hostel_data/API/general/hostel_info_detail.php?hostel_code=ohm&user_role=manager",
							"protocol": "https",
							"host": [
								"glexas",
								"com"
							],
							"path": [
								"hostel_data",
								"API",
								"general",
								"hostel_info_detail.php"
							],
							"query": [
								{
									"key": "hostel_code",
									"value": "ohm"
								},
								{
									"key": "hostel_code",
									"value": "narmda",
									"disabled": true
								},
								{
									"key": "user_role",
									"value": "manager"
								},
								{
									"key": "user_role",
									"value": "student",
									"disabled": true
								},
								{
									"key": "user_role",
									"value": "rector",
									"disabled": true
								},
								{
									"key": "user_role",
									"value": "counsellor",
									"disabled": true
								},
								{
									"key": "user_role",
									"value": "parent",
									"disabled": true
								},
								{
									"key": "user_role",
									"value": "staff",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search.php",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "income_expence",
			"item": [
				{
					"name": "manager_transaction_main_cru",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"flag\": \"Update\",\r\n    \"income_expence_record_id\": 10,\r\n    \"trn_type\":\"E\",\r\n    \"amount\":100,\r\n    \"trn_name\":\"test2\",\r\n    \"trn_description\":\"nothing\",\r\n    \"trn_date\":\"2024-05-12\",\r\n    \"status\":\"P\",\r\n    \"payment_mode\":\"UPI\",\r\n    \"payment_date\":\"2024-05-12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}income_expence/manager_transaction_main_cru.php",
							"host": [
								"{{path}}income_expence"
							],
							"path": [
								"manager_transaction_main_cru.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_transaction_main_cru",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}income_expence/manager_transaction_main_cru.php?from_trn_date=2024-05-15&to_trn_date=2024-06-15&from_payment_date=2025-05-15&to_payment_date=2025-05-15&trn_type=I&status=P&payment_mode=upi",
							"host": [
								"{{path}}income_expence"
							],
							"path": [
								"manager_transaction_main_cru.php"
							],
							"query": [
								{
									"key": "from_trn_date",
									"value": "2024-05-15"
								},
								{
									"key": "to_trn_date",
									"value": "2024-06-15"
								},
								{
									"key": "from_payment_date",
									"value": "2025-05-15"
								},
								{
									"key": "to_payment_date",
									"value": "2025-05-15"
								},
								{
									"key": "trn_type",
									"value": "I"
								},
								{
									"key": "trn_type",
									"value": "E",
									"disabled": true
								},
								{
									"key": "status",
									"value": "P"
								},
								{
									"key": "status",
									"value": "UP",
									"disabled": true
								},
								{
									"key": "payment_mode",
									"value": "upi"
								},
								{
									"key": "payment_mode",
									"value": "cheque",
									"disabled": true
								},
								{
									"key": "payment_mode",
									"value": "bank",
									"disabled": true
								},
								{
									"key": "payment_mode",
									"value": "cash",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_transaction_main_cru",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "trn_type",
									"value": "I",
									"type": "text"
								},
								{
									"key": "tran_type",
									"value": "E",
									"type": "text"
								},
								{
									"key": "trn_name",
									"value": "abc",
									"type": "text"
								},
								{
									"key": "trn_description",
									"value": "abc",
									"type": "text"
								},
								{
									"key": "trn_date",
									"value": "2025-05-15",
									"type": "text"
								},
								{
									"key": "amount",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "status",
									"value": "P",
									"type": "text"
								},
								{
									"key": "status",
									"value": "UP",
									"type": "text"
								},
								{
									"key": "payment_mode",
									"value": "CASH",
									"type": "text"
								},
								{
									"key": "payment_mode",
									"value": "upi",
									"type": "text"
								},
								{
									"key": "payment_mode",
									"value": "chequq",
									"type": "text"
								},
								{
									"key": "payment_mode",
									"value": "bank",
									"type": "text"
								},
								{
									"key": "check_upi_person",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "payment_date",
									"value": "2025-05-15",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}income_expence/manager_transaction_main_cru.php",
							"host": [
								"{{path}}income_expence"
							],
							"path": [
								"manager_transaction_main_cru.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "leave",
			"item": [
				{
					"name": "leave_view",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "range_from_date",
									"value": "",
									"type": "text"
								},
								{
									"key": "range_to_date",
									"value": "",
									"type": "text"
								},
								{
									"key": "place",
									"value": "",
									"type": "text"
								},
								{
									"key": "manager_filter_status",
									"value": "",
									"type": "text"
								},
								{
									"key": "parent_filter_status",
									"value": "",
									"type": "text"
								},
								{
									"key": "counsellor_filter_status",
									"value": "P",
									"type": "text"
								},
								{
									"key": "leave_name",
									"value": "",
									"type": "text"
								},
								{
									"key": "student_user_code",
									"value": "",
									"type": "text"
								},
								{
									"key": "range_from_date",
									"value": "2023-05-15",
									"type": "text",
									"disabled": true
								},
								{
									"key": "range_to_date",
									"value": "2023-05-30",
									"type": "text",
									"disabled": true
								},
								{
									"key": "place",
									"value": "Abcd",
									"type": "text",
									"disabled": true
								},
								{
									"key": "manager_filter_status",
									"value": "P",
									"type": "text",
									"disabled": true
								},
								{
									"key": "parent_filter_status",
									"value": "A",
									"type": "text",
									"disabled": true
								},
								{
									"key": "counsellor_filter_status",
									"value": "R",
									"type": "text",
									"disabled": true
								},
								{
									"key": "leave_name",
									"value": "Holiday",
									"type": "text",
									"disabled": true
								},
								{
									"key": "student_user_code",
									"value": "Student7",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}leave/leave_view.php?student_user_code=Student1",
							"host": [
								"{{path}}leave"
							],
							"path": [
								"leave_view.php"
							],
							"query": [
								{
									"key": "range_to_date",
									"value": null,
									"disabled": true
								},
								{
									"key": "range_from_date",
									"value": null,
									"disabled": true
								},
								{
									"key": "place",
									"value": null,
									"disabled": true
								},
								{
									"key": "manager_filter_status",
									"value": null,
									"disabled": true
								},
								{
									"key": "parent_filter_status",
									"value": null,
									"disabled": true
								},
								{
									"key": "counsellor_status_filter",
									"value": null,
									"disabled": true
								},
								{
									"key": "leave_name",
									"value": null,
									"disabled": true
								},
								{
									"key": "student_user_code",
									"value": "Student1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mcpr_leave_ru",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"leave_record_id\": 12,\r\n    \"leave_status\": \"R\",\r\n    \"is_exended_flag\": false,\r\n    \"swipe\": true,\r\n    \"latitude\": 37.7749,\r\n    \"longitude\": -122.4194\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}leave/mcpr_leave_ru.php",
							"host": [
								"{{path}}leave"
							],
							"path": [
								"mcpr_leave_ru.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "mcpr_leave_ru",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{path}}leave/mcpr_leave_ru.php",
							"host": [
								"{{path}}leave"
							],
							"path": [
								"mcpr_leave_ru.php"
							],
							"query": [
								{
									"key": "range_to_date",
									"value": "2022-02-05",
									"disabled": true
								},
								{
									"key": "range_from_date",
									"value": "2022-03-05",
									"disabled": true
								},
								{
									"key": "place",
									"value": "home",
									"disabled": true
								},
								{
									"key": "manager_filter_status",
									"value": "A",
									"disabled": true
								},
								{
									"key": "manager_filter_status",
									"value": "R",
									"disabled": true
								},
								{
									"key": "manager_filter_status",
									"value": "P",
									"disabled": true
								},
								{
									"key": "parent_filter_status",
									"value": "A",
									"disabled": true
								},
								{
									"key": "parent_filter_status",
									"value": "R",
									"disabled": true
								},
								{
									"key": "parent_filter_status",
									"value": "P",
									"disabled": true
								},
								{
									"key": "counsellor_filter_status",
									"value": "A",
									"disabled": true
								},
								{
									"key": "counsellor_filter_status",
									"value": "R",
									"disabled": true
								},
								{
									"key": "counsellor_filter_status",
									"value": "P",
									"disabled": true
								},
								{
									"key": "leave_name",
									"value": "holiday",
									"disabled": true
								},
								{
									"key": "student_user_code",
									"value": "Student",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "student_leave_type_list",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}leave/student_leave_type_list.php",
							"host": [
								"{{path}}leave"
							],
							"path": [
								"student_leave_type_list.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_leave_crud",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"leave_record_id\": 173\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}leave/student_leave_crud.php",
							"host": [
								"{{path}}leave"
							],
							"path": [
								"student_leave_crud.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_leave_crud",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}leave/student_leave_crud.php?range_to_date=2024-05-31&range_from_date=2024-05-01&place=Home&manager_filter_status=A&parent_filter_status=A&counsellor_filter_status=A&leave_name=Holiday&student_user_code=Student",
							"host": [
								"{{path}}leave"
							],
							"path": [
								"student_leave_crud.php"
							],
							"query": [
								{
									"key": "range_to_date",
									"value": "2024-05-31"
								},
								{
									"key": "range_from_date",
									"value": "2024-05-01"
								},
								{
									"key": "place",
									"value": "Home"
								},
								{
									"key": "manager_filter_status",
									"value": "A"
								},
								{
									"key": "manager_filter_status",
									"value": "R",
									"disabled": true
								},
								{
									"key": "manager_filter_status",
									"value": "P",
									"disabled": true
								},
								{
									"key": "parent_filter_status",
									"value": "A"
								},
								{
									"key": "parent_filter_status",
									"value": "R",
									"disabled": true
								},
								{
									"key": "parent_filter_status",
									"value": "P",
									"disabled": true
								},
								{
									"key": "counsellor_filter_status",
									"value": "A"
								},
								{
									"key": "counsellor_filter_status",
									"value": "R",
									"disabled": true
								},
								{
									"key": "counsellor_filter_status",
									"value": "P",
									"disabled": true
								},
								{
									"key": "leave_name",
									"value": "Holiday"
								},
								{
									"key": "student_user_code",
									"value": "Student"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "student_leave_crud",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "leave_main_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "leave_place",
									"value": "Home",
									"type": "text"
								},
								{
									"key": "reason",
									"value": "holiday",
									"type": "text"
								},
								{
									"key": "from_date",
									"value": "2024-05-15",
									"type": "text"
								},
								{
									"key": "to_date",
									"value": "2024-05-16",
									"type": "text"
								},
								{
									"key": "from_time",
									"value": "09:00:00",
									"type": "text"
								},
								{
									"key": "to_time",
									"value": "17:00:00",
									"type": "text"
								},
								{
									"key": "student_latitude",
									"value": "40.7128",
									"type": "text"
								},
								{
									"key": "student_longitude",
									"value": "-74.0060",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}leave/student_leave_crud.php",
							"host": [
								"{{path}}leave"
							],
							"path": [
								"student_leave_crud.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_leave_crud",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"leave_main_id\": 1,\r\n    \"leave_place\": \"Office\",\r\n    \"reason\": \"Taking personal leave\",\r\n    \"from_date\": \"2024-05-15\",\r\n    \"to_date\": \"2024-05-16\",\r\n    \"from_time\": \"09:00:00\",\r\n    \"to_time\": \"17:00:00\",\r\n    \"device_id\": 123456,\r\n    \"student_latitude\": 40.7128,\r\n    \"student_longitude\": -74.0060,\r\n    \"leave_record_id\": 456,\r\n    \"security_flag\": \"I\",\r\n    \"security_in_time\": \"08:45:00\",\r\n    \"security_out_time\": \"17:15:00\",\r\n    \"extended\": \"Y\",\r\n    \"extended_time\": \"00:00:00\",\r\n    \"extended_date\": \"2024-05-16\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}leave/student_leave_crud.php",
							"host": [
								"{{path}}leave"
							],
							"path": [
								"student_leave_crud.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "mcpr_location_device_check_r.php",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{path}}leave/mcpr_location_device_check_r.php?leave_record_id=1",
							"host": [
								"{{path}}leave"
							],
							"path": [
								"mcpr_location_device_check_r.php"
							],
							"query": [
								{
									"key": "leave_record_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "light_bill",
			"item": [
				{
					"name": "manager_room_light_bill_insert",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "room_main_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "light_bill_detail_id",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}light_bill/manager_room_light_bill_insert.php",
							"host": [
								"{{path}}light_bill"
							],
							"path": [
								"manager_room_light_bill_insert.php"
							],
							"query": [
								{
									"key": "room_main_id",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_room_light_bill_view",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "room_main_id",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}light_bill/manager_room_light_bill_view.php",
							"host": [
								"{{path}}light_bill"
							],
							"path": [
								"manager_room_light_bill_view.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "room_main",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "light_bill_detail_id",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local_path}}light_bill/room_main.php",
							"host": [
								"{{local_path}}light_bill"
							],
							"path": [
								"room_main.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_studentwise_light_bill_view",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "room_light_bill_record_id",
									"value": "",
									"type": "text"
								},
								{
									"key": "room_light_bill_record_id",
									"value": "1",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}light_bill/manager_studentwise_light_bill_view.php",
							"host": [
								"{{path}}light_bill"
							],
							"path": [
								"manager_studentwise_light_bill_view.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_room_light_bill_update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "room_light_bill_record_id",
									"value": "1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "room_main_id",
									"value": "2",
									"type": "text"
								},
								{
									"key": "new_unit",
									"value": "100",
									"type": "text"
								},
								{
									"key": "total_unit",
									"value": "270",
									"type": "text"
								},
								{
									"key": "total_bill",
									"value": "500",
									"type": "text"
								},
								{
									"key": "from_date",
									"value": "2022-04-10",
									"type": "text"
								},
								{
									"key": "to_date",
									"value": "2022-05-10",
									"type": "text"
								},
								{
									"key": "individual_light_bill",
									"value": "{ \"Student1\": 50,\"Student2\": 80, \"Student3\": 120 }",
									"type": "text"
								},
								{
									"key": "light_bill_detail_id",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}light_bill/manager_room_light_bill_update.php",
							"host": [
								"{{path}}light_bill"
							],
							"path": [
								"manager_room_light_bill_update.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_parent_light_bill_view",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{local_path}}light_bill/student_parent_light_bill_view.php",
							"host": [
								"{{local_path}}light_bill"
							],
							"path": [
								"student_parent_light_bill_view.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_light_bill_view_insert",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "new_unit",
									"value": "1010",
									"type": "text"
								},
								{
									"key": "per_unit_price",
									"value": "10",
									"type": "text"
								},
								{
									"key": "total_bill",
									"value": "10000",
									"type": "text"
								},
								{
									"key": "total_unit",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "status",
									"value": "121",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "view",
									"type": "text"
								},
								{
									"key": "light_bill_detail_id",
									"value": "1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "from_date",
									"value": "2023-03-20",
									"type": "text",
									"disabled": true
								},
								{
									"key": "to_date",
									"value": "2023-03-21",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}light_bill/manager_light_bill_view_insert.php",
							"host": [
								"{{path}}light_bill"
							],
							"path": [
								"manager_light_bill_view_insert.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "notice",
			"item": [
				{
					"name": "manager_notification_record",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}notice/manager_notification_record.php",
							"host": [
								"{{path}}notice"
							],
							"path": [
								"manager_notification_record.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification_view",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "archieved_status",
									"value": "",
									"type": "text"
								},
								{
									"key": "notifications_id",
									"value": "",
									"type": "text"
								},
								{
									"key": "archieved_status",
									"value": "S",
									"type": "text",
									"disabled": true
								},
								{
									"key": "notifications_id",
									"value": "2",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}notice/notification_view.php",
							"host": [
								"{{path}}notice"
							],
							"path": [
								"notification_view.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_notification_cr",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{path}}notice/manager_notification_cr.php",
							"host": [
								"{{path}}notice"
							],
							"path": [
								"manager_notification_cr.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_notification_cr",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "flag",
									"value": "student",
									"type": "text"
								},
								{
									"key": "flag",
									"value": "parent",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "counsellor",
									"type": "text",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Notice6",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Fees not paid",
									"type": "text"
								},
								{
									"key": "till_time",
									"value": "2023-05-30",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}notice/manager_notification_cr.php",
							"host": [
								"{{path}}notice"
							],
							"path": [
								"manager_notification_cr.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "registration",
			"item": [
				{
					"name": "access_type",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{manager_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}registration/access_type.php",
							"host": [
								"{{path}}registration"
							],
							"path": [
								"access_type.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "check_unique_details_availability",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_code_suggestion",
									"value": "Student3 ",
									"type": "text"
								},
								{
									"key": "phone_no",
									"value": "12345678145",
									"type": "text"
								},
								{
									"key": "phone_country_code",
									"value": "+91",
									"type": "text"
								},
								{
									"key": "hostel_code_suggestion",
									"value": "ohm",
									"type": "text"
								},
								{
									"key": "email",
									"value": "neelthomas.19@gmail.com",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}registration/check_unique_details_availability.php",
							"host": [
								"{{path}}registration"
							],
							"path": [
								"check_unique_details_availability.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "forgot_username",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "phone_no",
									"value": "9081653714",
									"type": "text"
								},
								{
									"key": "email",
									"value": "manan@gmail.com",
									"type": "text"
								},
								{
									"key": "flag",
									"value": "P",
									"type": "text"
								},
								{
									"key": "app_type",
									"value": "W",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}registration/forgot_username.php",
							"host": [
								"{{path}}registration"
							],
							"path": [
								"forgot_username.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "forgot_password",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "",
									"type": "text"
								},
								{
									"key": "new_password",
									"value": "",
									"type": "text"
								},
								{
									"key": "confirm_new_password",
									"value": "",
									"type": "text"
								},
								{
									"key": "flag",
									"value": "",
									"type": "text"
								},
								{
									"key": "app_type",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}registration/forgot_password.php",
							"host": [
								"{{path}}registration"
							],
							"path": [
								"forgot_password.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "app_type",
									"value": "W",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}registration/logout.php",
							"host": [
								"{{path}}registration"
							],
							"path": [
								"logout.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "otp_status_update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "is_verified",
									"value": "Y",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}registration/otp_status_update.php",
							"host": [
								"{{path}}registration"
							],
							"path": [
								"otp_status_update.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "otp_status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}registration/otp_status.php",
							"host": [
								"{{path}}registration"
							],
							"path": [
								"otp_status.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "register",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_role",
									"value": "parent",
									"type": "text"
								},
								{
									"key": "user_code",
									"value": "Parent63",
									"type": "text"
								},
								{
									"key": "user_hostel_code",
									"value": "ohm",
									"type": "text"
								},
								{
									"key": "first_name",
									"value": "abhi163",
									"type": "text"
								},
								{
									"key": "middle_name",
									"value": "vv",
									"type": "text"
								},
								{
									"key": "last_name",
									"value": "vv",
									"type": "text"
								},
								{
									"key": "phone_number",
									"value": "1234567110",
									"type": "text"
								},
								{
									"key": "email",
									"value": "abhi110@gmail.com",
									"type": "text"
								},
								{
									"key": "pwd",
									"value": "123456",
									"type": "text"
								},
								{
									"key": "address_line1",
									"value": "Vadodara",
									"type": "text"
								},
								{
									"key": "address_line2",
									"value": "Vadodara",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Vadodara",
									"type": "text"
								},
								{
									"key": "taluka",
									"value": "Vadodara",
									"type": "text"
								},
								{
									"key": "district",
									"value": "Vadodara",
									"type": "text"
								},
								{
									"key": "state",
									"value": "Gujarat",
									"type": "text"
								},
								{
									"key": "country",
									"value": "Inida",
									"type": "text"
								},
								{
									"key": "pincode",
									"value": "390000",
									"type": "text"
								},
								{
									"key": "is_verified",
									"value": "Y",
									"type": "text"
								},
								{
									"key": "phone_country_code",
									"value": "+91",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}registration/register.php",
							"host": [
								"{{path}}registration"
							],
							"path": [
								"register.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if login is successful\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.true;\r",
									"    \r",
									"    if (jsonData.status) {\r",
									"        pm.environment.set(\"api_token\", jsonData.api_token);\r",
									"        console.log(\"API Token is: \" + jsonData.api_token);\r",
									"    } else {\r",
									"        console.log(\"Login failed: \" + jsonData.message);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "Neel",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"Student\",\r\n    \"password\" : \"Student\",\r\n    \"app_type\" : \"A\"\r\n}"
						},
						"url": {
							"raw": "{{path}}registration/login.php",
							"host": [
								"{{path}}registration"
							],
							"path": [
								"login.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "room_allotment",
			"item": [
				{
					"name": "manager_branch_room_share",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}room_allotment/manager_branch_room_share.php",
							"host": [
								"{{path}}room_allotment"
							],
							"path": [
								"manager_branch_room_share.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "mr_room_crd",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "room_main_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "student_user_code",
									"value": "Student7",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}room_allotment/mr_room_crd.php",
							"host": [
								"{{path}}room_allotment"
							],
							"path": [
								"mr_room_crd.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "mr_room_crd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}room_allotment/mr_room_crd.php?room_main_id=1",
							"host": [
								"{{path}}room_allotment"
							],
							"path": [
								"mr_room_crd.php"
							],
							"query": [
								{
									"key": "room_main_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mr_room_crd",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"room_main_id\": 1,\r\n    \"student_user_code\": \"Student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}room_allotment/mr_room_crd.php",
							"host": [
								"{{path}}room_allotment"
							],
							"path": [
								"mr_room_crd.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_room_list",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "room_status_filter",
									"value": "F",
									"type": "text"
								},
								{
									"key": "room_sharing_filter",
									"value": "0",
									"type": "text"
								},
								{
									"key": "no_of_student_filter",
									"value": "0",
									"type": "text"
								},
								{
									"key": "module_name",
									"value": "room",
									"type": "text"
								},
								{
									"key": "room_status_filter",
									"value": "F",
									"type": "text",
									"disabled": true
								},
								{
									"key": "room_sharing_filter",
									"value": "1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "no_of_student_filter",
									"value": "2",
									"type": "text",
									"disabled": true
								},
								{
									"key": "module_name",
									"value": "room",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}room_allotment/manager_room_list.php?room_status_filter=E&room_sharing_filter=0&no_of_student_filter=0&module_name=room",
							"host": [
								"{{path}}room_allotment"
							],
							"path": [
								"manager_room_list.php"
							],
							"query": [
								{
									"key": "room_status_filter",
									"value": "E"
								},
								{
									"key": "room_sharing_filter",
									"value": "0"
								},
								{
									"key": "no_of_student_filter",
									"value": "0"
								},
								{
									"key": "module_name",
									"value": "room"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_room_request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "flag",
									"value": "Request",
									"type": "text"
								},
								{
									"key": "flag",
									"value": "Responce",
									"type": "text",
									"disabled": true
								},
								{
									"key": "room_request_id",
									"value": "16",
									"type": "text",
									"disabled": true
								},
								{
									"key": "request",
									"value": "Y",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}room_allotment/manager_room_request.php",
							"host": [
								"{{path}}room_allotment"
							],
							"path": [
								"manager_room_request.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_room_student_list",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}room_allotment/manager_room_student_list.php?room_main_id=4",
							"host": [
								"{{path}}room_allotment"
							],
							"path": [
								"manager_room_student_list.php"
							],
							"query": [
								{
									"key": "room_main_id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_student_remove",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"room_main_id\": 1,\r\n    \"student_user_code\": \"Student7\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}room_allotment/manager_student_room_remove.php",
							"host": [
								"{{path}}room_allotment"
							],
							"path": [
								"manager_student_room_remove.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_student_room_transfer",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"room_main_id\": 4,\r\n    \"user_code\": \"Student1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}room_allotment/manager_student_room_transfer.php",
							"host": [
								"{{path}}room_allotment"
							],
							"path": [
								"manager_student_room_transfer.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_room_request.php",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "room_main_id",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}room_allotment/student_room_request.php",
							"host": [
								"{{path}}room_allotment"
							],
							"path": [
								"student_room_request.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "search",
			"item": [
				{
					"name": "scp_autocomplete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"user_code\": { \"type\": \"string\" },\r",
									"        \"flag\": { \"type\": \"string\", \"enum\": [\"S\", \"C\", \"P\"] }\r",
									"    },\r",
									"    \"required\": [\"user_code\", \"flag\"]\r",
									"};\r",
									"pm.test(\"Request data is valid\", function () {\r",
									"    const jsonData = pm.request.body.toJSON();\r",
									"    pm.expect(jsonData.mode).to.equal('formdata');\r",
									"\r",
									"    const formData = jsonData.formdata.reduce((obj, item) => {\r",
									"        obj[item.key] = item.value;\r",
									"        return obj;\r",
									"    }, {});\r",
									"\r",
									"    pm.expect(formData).to.have.property('user_code').that.is.a('string');\r",
									"    pm.expect(formData).to.have.property('flag').that.is.oneOf(['S', 'C', 'P']);\r",
									"});\r",
									"\r",
									"// Validate request body is FormData\r",
									"pm.test(\"Request body is FormData\", function () {\r",
									"    const jsonData = pm.request.body.toJSON();\r",
									"    pm.expect(jsonData.mode).to.equal('formdata');\r",
									"});\r",
									"\r",
									"// Validate required fields are present\r",
									"pm.test(\"Required fields are present\", function () {\r",
									"    const jsonData = pm.request.body.toJSON();\r",
									"    const formData = jsonData.formdata.reduce((obj, item) => {\r",
									"        obj[item.key] = item.value;\r",
									"        return obj;\r",
									"    }, {});\r",
									"\r",
									"    pm.expect(formData).to.have.property('user_code');\r",
									"    pm.expect(formData).to.have.property('flag');\r",
									"});\r",
									"\r",
									"// Validate flag is 'S', 'C', or 'P'\r",
									"pm.test(\"Flag is 'S', 'C', or 'P'\", function () {\r",
									"    const jsonData = pm.request.body.toJSON();\r",
									"    const formData = jsonData.formdata.reduce((obj, item) => {\r",
									"        obj[item.key] = item.value;\r",
									"        return obj;\r",
									"    }, {});\r",
									"\r",
									"    pm.expect(formData.flag).to.be.oneOf(['S', 'C', 'P']);\r",
									"});\r",
									"\r",
									"// Validate user code is a non-empty string\r",
									"pm.test(\"User code is a non-empty string\", function () {\r",
									"    const jsonData = pm.request.body.toJSON();\r",
									"    const formData = jsonData.formdata.reduce((obj, item) => {\r",
									"        obj[item.key] = item.value;\r",
									"        return obj;\r",
									"    }, {});\r",
									"\r",
									"    pm.expect(formData.user_code).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Validate request body size is less than 1MB\r",
									"pm.test(\"Request body size is less than 1MB\", function () {\r",
									"    const jsonData = pm.request.body.toJSON();\r",
									"    const sizeInBytes = Buffer.byteLength(JSON.stringify(jsonData));\r",
									"    const maxSizeInBytes = 1024 * 1024; // 1MB\r",
									"\r",
									"    pm.expect(sizeInBytes).to.be.below(maxSizeInBytes);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response schema\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"status\": { \"type\": \"boolean\" },\r",
									"            \"data\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"user_code\": { \"type\": \"string\" },\r",
									"                        \"full_name\": { \"type\": \"string\" },\r",
									"                        \"mobile_number\": { \"type\": \"number\" }\r",
									"                    },\r",
									"                    \"required\": [\"user_code\", \"full_name\", \"mobile_number\"]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"status\", \"data\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// Validate response status code\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate Content-Type header\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Validate response time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Validate data count\r",
									"pm.test(\"Response contains 3 data items\", function () {\r",
									"    pm.expect(pm.response.json().data.length).to.equal(3);\r",
									"});\r",
									"\r",
									"// Validate user codes are unique\r",
									"pm.test(\"User codes are unique\", function () {\r",
									"    const userCodes = pm.response.json().data.map(item => item.user_code);\r",
									"    pm.expect(userCodes).to.have.lengthOf(new Set(userCodes).size);\r",
									"});\r",
									"\r",
									"// Validate mobile numbers format\r",
									"pm.test(\"Mobile numbers are valid\", function () {\r",
									"    const mobileNumbers = pm.response.json().data.map(item => item.mobile_number);\r",
									"    mobileNumbers.forEach(function (number) {\r",
									"        pm.expect(number).to.match(/^\\d{10}$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Validate response data\r",
									"pm.test(\"Response contains correct data\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.true;\r",
									"    pm.expect(pm.response.json().data).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    pm.response.json().data.forEach(function (item) {\r",
									"        pm.expect(item).to.have.property('user_code').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('full_name').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('mobile_number').that.is.a('number');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_code",
									"value": "A",
									"type": "text"
								},
								{
									"key": "flag",
									"value": "P",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}search/scp_autocomplete.php",
							"host": [
								"{{path}}search"
							],
							"path": [
								"scp_autocomplete.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "ms_block_room_list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the form data schema\r",
									"const formDataSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"flag\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"room\", \"block\"]\r",
									"        },\r",
									"        \"is_rector\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"block_number\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"flag\", \"is_rector\", \"block_number\"]\r",
									"};\r",
									"\r",
									"// Function to convert form data to a JSON object\r",
									"function getFormDataAsJson(formData) {\r",
									"    const result = {};\r",
									"    formData.each(function(item) {\r",
									"        result[item.key] = item.value;\r",
									"    });\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Get the form data\r",
									"const formData = pm.request.body.formdata;\r",
									"const formDataJson = getFormDataAsJson(formData);\r",
									"\r",
									"// Log the raw form data for debugging\r",
									"console.log(\"Raw form data:\", formDataJson);\r",
									"\r",
									"// Convert string values to appropriate types\r",
									"formDataJson.is_rector = formDataJson.is_rector === 'true';\r",
									"formDataJson.flag = formDataJson.flag.toLowerCase();  // Convert to lowercase to match schema enum\r",
									"formDataJson.block_number = formDataJson.block_number.toString();\r",
									"\r",
									"// Log the converted form data for debugging\r",
									"console.log(\"Converted form data:\", formDataJson);\r",
									"\r",
									"// Validate block_number separately for case-insensitivity\r",
									"const blockNumberPattern = /^building [0-9]+$/i;  // Case-insensitive pattern\r",
									"const isValidBlockNumber = blockNumberPattern.test(formDataJson.block_number);\r",
									"console.log(\"Block number validation result:\", isValidBlockNumber);  // Log validation result\r",
									"\r",
									"if (!isValidBlockNumber) {\r",
									"    console.log(`Validation error: block_number should match pattern \"${blockNumberPattern}\"`);\r",
									"    throw new Error(\"Form data validation failed\");\r",
									"}\r",
									"\r",
									"// Use Ajv for schema validation\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"const validate = ajv.compile(formDataSchema);\r",
									"const valid = validate(formDataJson);\r",
									"\r",
									"if (!valid) {\r",
									"    console.log(\"Validation errors:\", validate.errors);\r",
									"    throw new Error(\"Form data validation failed\");\r",
									"}\r",
									"\r",
									"// Log the form data\r",
									"console.log(\"Form data is valid:\", formDataJson);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Define the Block List Schema\r",
									"const blockListSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": { \"type\": \"boolean\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"block_number\": { \"type\": \"string\" },\r",
									"                    \"branch_building_main_id\": { \"type\": \"integer\" } // Assuming integer type for IDs\r",
									"                },\r",
									"                \"required\": [\"block_number\", \"branch_building_main_id\"]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"status\", \"message\", \"data\"]\r",
									"};\r",
									"\r",
									"// Get the response JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Validate Block List Schema\r",
									"pm.test(\"Validate Block List Schema\", function () {\r",
									"    pm.expect(tv4.validate(responseJson, blockListSchema)).to.be.true;\r",
									"});\r",
									"\r",
									"// Additional Test Cases\r",
									"\r",
									"// Test Case 1: Check if status is true\r",
									"pm.test(\"Status is true\", function () {\r",
									"    pm.expect(responseJson.status).to.be.true;\r",
									"});\r",
									"\r",
									"// Test Case 2: Check if message is \"Block List\"\r",
									"pm.test(\"Message is 'Block List'\", function () {\r",
									"    pm.expect(responseJson.message).to.equal(\"Block List\");\r",
									"});\r",
									"\r",
									"// Test Case 3: Check if data is an array\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(responseJson.data).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Test Case 4: Check if each item in data has required properties\r",
									"pm.test(\"Each item in data has required properties\", function () {\r",
									"    responseJson.data.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"block_number\");\r",
									"        pm.expect(item).to.have.property(\"branch_building_main_id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test Case 5: Check if branch_building_main_id is an integer\r",
									"pm.test(\"branch_building_main_id is an integer\", function () {\r",
									"    responseJson.data.forEach(item => {\r",
									"        pm.expect(item.branch_building_main_id).to.be.a(\"number\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "flag",
									"value": "Block",
									"type": "text"
								},
								{
									"key": "block_number",
									"value": "Building3",
									"type": "text"
								},
								{
									"key": "is_rector",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}search/ms_block_room_list.php",
							"host": [
								"{{path}}search"
							],
							"path": [
								"ms_block_room_list.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "sc_college_deparment_list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the schemas\r",
									"const collegeSchema = {\r",
									"  type: \"object\",\r",
									"  properties: {\r",
									"    flag: { type: \"string\", enum: [\"College\"] },\r",
									"    college_name: { type: \"string\" }\r",
									"  },\r",
									"  required: [\"flag\", \"college_name\"]\r",
									"};\r",
									"\r",
									"const departmentSchema = {\r",
									"  type: \"object\",\r",
									"  properties: {\r",
									"    flag: { type: \"string\", enum: [\"Department\"] },\r",
									"    college_main_id: { type: \"integer\" },\r",
									"    department_name: { type: \"string\" }\r",
									"  },\r",
									"  required: [\"flag\", \"college_main_id\", \"department_name\"]\r",
									"};\r",
									"\r",
									"// Get the form data\r",
									"const flag = pm.request.body.formdata.find(item => item.key === 'flag').value;\r",
									"const collegeMainId = pm.request.body.formdata.find(item => item.key === 'college_main_id')?.value;\r",
									"const collegeName = pm.request.body.formdata.find(item => item.key === 'college_name')?.value;\r",
									"const departmentName = pm.request.body.formdata.find(item => item.key === 'department_name')?.value;\r",
									"\r",
									"// Create an object from the form data\r",
									"const formData = {\r",
									"  flag: flag,\r",
									"  college_main_id: collegeMainId ? parseInt(collegeMainId) : undefined,\r",
									"  college_name: collegeName,\r",
									"  department_name: departmentName\r",
									"};\r",
									"\r",
									"// Validate the form data against the respective schema\r",
									"if (flag === 'College') {\r",
									"  pm.test(\"Validate College form data\", function() {\r",
									"    const valid = tv4.validate(formData, collegeSchema);\r",
									"    pm.expect(valid).to.be.true;\r",
									"    if (!valid) {\r",
									"      console.log(tv4.error);\r",
									"      throw new Error('Validation failed for College schema');\r",
									"    }\r",
									"  });\r",
									"} else if (flag === 'Department') {\r",
									"  pm.test(\"Validate Department form data\", function() {\r",
									"    const valid = tv4.validate(formData, departmentSchema);\r",
									"    pm.expect(valid).to.be.true;\r",
									"    if (!valid) {\r",
									"      console.log(tv4.error);\r",
									"      throw new Error('Validation failed for Department schema');\r",
									"    }\r",
									"  });\r",
									"} else {\r",
									"  throw new Error('Invalid flag value. Must be either \"College\" or \"Department\".');\r",
									"}\r",
									"\r",
									"// Function to implement search functionality (mock data and search logic)\r",
									"const searchDatabase = (flag, searchValue) => {\r",
									"  const colleges = [\r",
									"    { college_main_id: 2, college_name: \"Csmss chh. shahu college of engineering\" },\r",
									"    { college_main_id: 5, college_name: \"Chandaben Mohanbhai Patel Institute of Computer Ap\" },\r",
									"    { college_main_id: 8, college_name: \"Ramanbhai Patel College of Pharmacy\" },\r",
									"    { college_main_id: 17, college_name: \"Chartered Institute of Procurement & Supply\" }\r",
									"  ];\r",
									"\r",
									"  const departments = [\r",
									"    { college_main_id: 2, department_name: \"Computer Science\" },\r",
									"    { college_main_id: 5, department_name: \"Information Technology\" },\r",
									"    { college_main_id: 8, department_name: \"Pharmacy\" },\r",
									"    { college_main_id: 17, department_name: \"Procurement & Supply\" }\r",
									"  ];\r",
									"\r",
									"  if (flag === 'College') {\r",
									"    return colleges.filter(college => college.college_name.toLowerCase().includes(searchValue.toLowerCase()));\r",
									"  } else if (flag === 'Department') {\r",
									"    return departments.filter(department => department.department_name.toLowerCase().includes(searchValue.toLowerCase()) && department.college_main_id === parseInt(collegeMainId));\r",
									"  } else {\r",
									"    return [];\r",
									"  }\r",
									"};\r",
									"\r",
									"// Perform the search based on the flag\r",
									"let searchResults = [];\r",
									"if (flag === 'College' && collegeName) {\r",
									"  searchResults = searchDatabase(flag, collegeName);\r",
									"} else if (flag === 'Department' && departmentName && collegeMainId) {\r",
									"  searchResults = searchDatabase(flag, departmentName);\r",
									"}\r",
									"\r",
									"// Store the search results in an environment variable\r",
									"pm.environment.set('searchResults', JSON.stringify(searchResults));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  type: \"object\",\r",
									"  properties: {\r",
									"    status: { type: \"boolean\" },\r",
									"    message: { type: \"string\" },\r",
									"    responce: {\r",
									"      type: \"array\",\r",
									"      items: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          college_main_id: { type: \"integer\" },\r",
									"          college_name: { type: \"string\" }\r",
									"        },\r",
									"        required: [\"college_main_id\", \"college_name\"]\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  required: [\"status\", \"message\", \"responce\"]\r",
									"};\r",
									"\r",
									"// Parse the JSON response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate the response schema\r",
									"pm.test(\"Response schema is valid\", function() {\r",
									"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"// Additional test to ensure the status is true\r",
									"pm.test(\"Status is true\", function() {\r",
									"  pm.expect(jsonData.status).to.be.true;\r",
									"});\r",
									"\r",
									"// Additional test to ensure the message is a non-empty string\r",
									"pm.test(\"Message is a non-empty string\", function() {\r",
									"  pm.expect(jsonData.message).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Additional test to ensure the 'responce' array is not empty\r",
									"pm.test(\"'Responce' array is not empty\", function() {\r",
									"  pm.expect(jsonData.responce).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test to ensure 'responce' array contains only objects with required properties\r",
									"pm.test(\"Each item in 'responce' array has required properties\", function() {\r",
									"  jsonData.responce.forEach(item => {\r",
									"    pm.expect(item).to.have.property(\"college_main_id\");\r",
									"    pm.expect(item).to.have.property(\"college_name\");\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test to ensure 'college_main_id' is an integer and greater than 0\r",
									"pm.test(\"Each 'college_main_id' in 'responce' array is a positive integer\", function() {\r",
									"  jsonData.responce.forEach(item => {\r",
									"    pm.expect(item.college_main_id).to.be.a('number');\r",
									"    pm.expect(Number.isInteger(item.college_main_id)).to.be.true;\r",
									"    pm.expect(item.college_main_id).to.be.above(0);\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test to ensure 'college_name' is a non-empty string\r",
									"pm.test(\"Each 'college_name' in 'responce' array is a non-empty string\", function() {\r",
									"  jsonData.responce.forEach(item => {\r",
									"    pm.expect(item.college_name).to.be.a('string').and.to.not.be.empty;\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test to ensure 'college_name' does not contain only whitespace\r",
									"pm.test(\"Each 'college_name' in 'responce' array does not contain only whitespace\", function() {\r",
									"  jsonData.responce.forEach(item => {\r",
									"    pm.expect(item.college_name.trim()).to.not.be.empty;\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test to ensure 'status' key exists and is a boolean\r",
									"pm.test(\"'status' key exists and is a boolean\", function() {\r",
									"  pm.expect(jsonData).to.have.property(\"status\");\r",
									"  pm.expect(jsonData.status).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"// Test to ensure 'message' key exists and is a string\r",
									"pm.test(\"'message' key exists and is a string\", function() {\r",
									"  pm.expect(jsonData).to.have.property(\"message\");\r",
									"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Test to ensure 'responce' key exists and is an array\r",
									"pm.test(\"'responce' key exists and is an array\", function() {\r",
									"  pm.expect(jsonData).to.have.property(\"responce\");\r",
									"  pm.expect(jsonData.responce).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "flag",
									"value": "College",
									"type": "text"
								},
								{
									"key": "college_main_id",
									"value": "2",
									"type": "text"
								},
								{
									"key": "department_name",
									"value": "D",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "College",
									"type": "text",
									"disabled": true
								},
								{
									"key": "college_name",
									"value": "C",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}search/sc_college_deparment_list.php",
							"host": [
								"{{path}}search"
							],
							"path": [
								"sc_college_deparment_list.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// JSON Schema for validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"users\": {\r",
									"            \"type\": \"string\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\"users\"]\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"status\", \"data\"]\r",
									"};\r",
									"\r",
									"// Get response\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Perform JSON schema validation\r",
									"pm.test(\"Response conforms to schema\", function() {\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"// Additional test cases\r",
									"\r",
									"pm.test(\"Status is true\", function() {\r",
									"  pm.expect(response.status).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function() {\r",
									"  pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item in data has users property of type string\", function() {\r",
									"  response.data.forEach(item => {\r",
									"    pm.expect(item).to.have.property('users');\r",
									"    pm.expect(item.users).to.be.a('string');\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test for specific values in the users array\r",
									"pm.test(\"Data contains specific users\", function() {\r",
									"  const expectedUsers = [\"Student\", \"Parent\", \"Counsellor\", \"Rector\"];\r",
									"  const actualUsers = response.data.map(item => item.users);\r",
									"  expectedUsers.forEach(user => {\r",
									"    pm.expect(actualUsers).to.include(user);\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test for non-empty users property\r",
									"pm.test(\"Users property is non-empty string\", function() {\r",
									"  response.data.forEach(item => {\r",
									"    pm.expect(item.users).to.not.be.empty;\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test response time\r",
									"pm.test(\"Response time is less than 200ms\", function() {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test response status code\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test content-type header\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"  pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"// Check that there are no duplicate users\r",
									"pm.test(\"No duplicate users\", function() {\r",
									"  const users = response.data.map(item => item.users);\r",
									"  const uniqueUsers = [...new Set(users)];\r",
									"  pm.expect(users.length).to.eql(uniqueUsers.length);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}search/user_role.php",
							"host": [
								"{{path}}search"
							],
							"path": [
								"user_role.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_staff_position_list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Define the JSON schema\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"status\", \"message\", \"data\"]\r",
									"};\r",
									"\r",
									"// Parse the response\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Perform the schema validation\r",
									"pm.test(\"Response schema is valid\", function() {\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"// Additional test cases\r",
									"\r",
									"// Check if status is true\r",
									"pm.test(\"Status is true\", function() {\r",
									"  pm.expect(response.status).to.be.true;\r",
									"});\r",
									"\r",
									"// Check if message is \"Staff Position Lists\"\r",
									"pm.test(\"Message is 'Staff Position Lists'\", function() {\r",
									"  pm.expect(response.message).to.eql(\"Staff Position Lists\");\r",
									"});\r",
									"\r",
									"// Check if data contains specific positions\r",
									"const expectedPositions = [\"complaint_staff\", \"complaint_staffadmin\", \"food_staff\", \"manager\", \"rector\"];\r",
									"pm.test(\"Data contains expected positions\", function() {\r",
									"  expectedPositions.forEach(function(position) {\r",
									"    pm.expect(response.data).to.include(position);\r",
									"  });\r",
									"});\r",
									"\r",
									"// Check if data array is not empty\r",
									"pm.test(\"Data array is not empty\", function() {\r",
									"  pm.expect(response.data).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}search/manager_staff_position_list.php",
							"host": [
								"{{path}}search"
							],
							"path": [
								"manager_staff_position_list.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "security",
			"item": [
				{
					"name": "access_token_add",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "version_key",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}security/access_token_add.php",
							"host": [
								"{{path}}security"
							],
							"path": [
								"access_token_add.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "access_token_check",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}security/access_token_check.php",
							"host": [
								"{{path}}security"
							],
							"path": [
								"access_token_check.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "access_token_refresh",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "latitude",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "longitude",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "app_type",
									"value": "I",
									"type": "text",
									"disabled": true
								},
								{
									"key": "app_type",
									"value": "A",
									"type": "text",
									"disabled": true
								},
								{
									"key": "app_type",
									"value": "W",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}security/access_token_refresh.php",
							"host": [
								"{{path}}security"
							],
							"path": [
								"access_token_refresh.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "access_token_verify",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}security/access_token_verify.php",
							"host": [
								"{{path}}security"
							],
							"path": [
								"access_token_verify.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "api_token_check",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}security/api_token_check.php",
							"host": [
								"{{path}}security"
							],
							"path": [
								"api_token_check.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "api_token_refresh",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "api_token",
									"value": "",
									"type": "text"
								},
								{
									"key": "reason",
									"value": "",
									"type": "text"
								},
								{
									"key": "latitude",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "longitude",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "app_type",
									"value": "I",
									"type": "text"
								},
								{
									"key": "app_type",
									"value": "A",
									"type": "text",
									"disabled": true
								},
								{
									"key": "app_type",
									"value": "W",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}security/api_token_refresh.php",
							"host": [
								"{{path}}security"
							],
							"path": [
								"api_token_refresh.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "api_token_verify",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}security/api_token_verify.php",
							"host": [
								"{{path}}security"
							],
							"path": [
								"api_token_verify.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "max_login_device_remove",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "device_record_id",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}security/max_login_device_remove.php",
							"host": [
								"{{path}}security"
							],
							"path": [
								"max_login_device_remove.php"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "settings",
			"item": [
				{
					"name": "image_data_upload",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image_path_name",
									"value": "localhost/img/6.jpg",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{path}}settings/image_data_upload.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"image_data_upload.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "pc_manage_student_update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "flag",
									"value": "View",
									"type": "text"
								},
								{
									"key": "flag",
									"value": "Update",
									"type": "text",
									"disabled": true
								},
								{
									"key": "student_relation_main_id",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}settings/pc_manage_student_update.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"pc_manage_student_update.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "profile_update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "student_main_id",
									"value": "7",
									"type": "text",
									"disabled": true
								},
								{
									"key": "parent_main_id",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "counsellor_main_id",
									"value": "3",
									"type": "text",
									"disabled": true
								},
								{
									"key": "staff_main_id",
									"value": "43",
									"type": "text",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "first_name",
									"value": "aaa",
									"type": "text"
								},
								{
									"key": "middle_name",
									"value": "bbbb",
									"type": "text"
								},
								{
									"key": "last_name",
									"value": "ccc",
									"type": "text"
								},
								{
									"key": "email",
									"value": "xyz@gmail.com",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "9465327444",
									"type": "text"
								},
								{
									"key": "country_code",
									"value": "+91",
									"type": "text"
								},
								{
									"key": "address_main_id",
									"value": "",
									"type": "text"
								},
								{
									"key": "address_line_1",
									"value": "aaP1",
									"type": "text"
								},
								{
									"key": "parent_username",
									"value": "Parent1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "address_line_2",
									"value": "AL2",
									"type": "text"
								},
								{
									"key": "city",
									"value": "VadodaraPS1",
									"type": "text"
								},
								{
									"key": "taluka",
									"value": "VadodaraPS1",
									"type": "text"
								},
								{
									"key": "district",
									"value": "VadodaraP1",
									"type": "text"
								},
								{
									"key": "state",
									"value": "GujaratPS1",
									"type": "text"
								},
								{
									"key": "country",
									"value": "India",
									"type": "text"
								},
								{
									"key": "pincode",
									"value": "390001",
									"type": "text"
								},
								{
									"key": "student_username",
									"value": "Stuser",
									"type": "text",
									"disabled": true
								},
								{
									"key": "photo",
									"value": "pic1.jpg",
									"type": "text"
								},
								{
									"key": "college_name",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "college_enrollment_id",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "counsellor_username",
									"value": "Counsellor1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "relative_type",
									"value": "C",
									"type": "text",
									"disabled": true
								},
								{
									"key": "room_main_id",
									"value": "4",
									"type": "text",
									"disabled": true
								},
								{
									"key": "student_username",
									"value": "Student9",
									"type": "text",
									"disabled": true
								},
								{
									"key": "college_employee_id",
									"value": "5",
									"type": "text",
									"disabled": true
								},
								{
									"key": "college_detail_id",
									"value": "2",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}settings/profile_update.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"profile_update.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "profile_view",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}settings/profile_view.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"profile_view.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_default_hostel_status_update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "old_hostel_code",
									"value": "ohm1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}settings/student_default_hostel_status_update.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"student_default_hostel_status_update.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_new_hostel_add",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "new_hostel_code",
									"value": "ohm",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}settings/student_new_hostel_add.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"student_new_hostel_add.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_old_hostelcode",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}settings/student_old_hostelcode.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"student_old_hostelcode.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_relation_insert",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "flag",
									"value": "Both",
									"type": "text"
								},
								{
									"key": "parent_code",
									"value": "Parent4",
									"type": "text"
								},
								{
									"key": "counsellor_code",
									"value": "Counsellor1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local_path}}settings/student_relation_insert.php",
							"host": [
								"{{local_path}}settings"
							],
							"path": [
								"student_relation_insert.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "rector_associate_building_list",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_code",
									"value": "Rector1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}settings/rector_associate_building_list.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"rector_associate_building_list.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "rector_details_add_remove",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_code",
									"value": "Rector3",
									"type": "text"
								},
								{
									"key": "branch_building_name",
									"value": "[Building3]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}settings/rector_details_add_remove.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"rector_details_add_remove.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "old_profile_view",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{path}}settings/old_profile_view.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"old_profile_view.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "change_password",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "password",
									"value": "123456",
									"type": "text"
								},
								{
									"key": "confirm_password",
									"value": "123456",
									"type": "text"
								},
								{
									"key": "app_type",
									"value": "W",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}settings/change_password.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"change_password.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "change_username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JSON Schema Definition\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"new_user_name\": {\r",
									"            \"type\": \"string\",\r",
									"            \"pattern\": \"^[a-zA-Z0-9]+$\"\r",
									"        },\r",
									"        \"app_type\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"A\", \"I\", \"W\"]\r",
									"        },\r",
									"        \"old_user_name\": {\r",
									"            \"type\": \"string\",\r",
									"            \"pattern\": \"^[a-zA-Z0-9]+$\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"new_user_name\", \"app_type\", \"old_user_name\"]\r",
									"};\r",
									"\r",
									"// Collect form data\r",
									"const formData = {};\r",
									"pm.request.body.formdata.each(function(item) {\r",
									"    formData[item.key] = item.value;\r",
									"});\r",
									"\r",
									"// Validate form data against schema\r",
									"pm.test('Form data should conform to the schema', function() {\r",
									"    const formValidationResult = tv4.validateMultiple(formData, schema);\r",
									"    pm.expect(formValidationResult.valid).to.be.true;\r",
									"    if (!formValidationResult.valid) {\r",
									"        console.log('Form data validation errors: ', formValidationResult.errors);\r",
									"    }\r",
									"});\r",
									"// Check for missing fields in the form data\r",
									"pm.test('Form data should not have missing fields', function() {\r",
									"    const requiredFields = ['new_user_name', 'app_type', 'old_user_name'];\r",
									"    requiredFields.forEach(function(field) {\r",
									"        pm.expect(formData).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Check for invalid field values in the form data\r",
									"pm.test('Form data should have valid field values', function() {\r",
									"    pm.expect(formData.new_user_name).to.match(/^[a-zA-Z0-9]+$/);\r",
									"    pm.expect(formData.app_type).to.be.oneOf(['A', 'I', 'W']);\r",
									"    pm.expect(formData.old_user_name).to.match(/^[a-zA-Z0-9]+$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// JSON Schema Definition\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"status\", \"message\"]\r",
									"};\r",
									"\r",
									"// Parse the response body\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Validate the response against the schema\r",
									"pm.test('Response should conform to the schema', function() {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"// Additional tests\r",
									"pm.test('Status should be true', function() {\r",
									"    pm.expect(responseJson.status).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Message should be \"Username change successfully\"', function() {\r",
									"    pm.expect(responseJson.message).to.equal('Username change sucessfully');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "new_user_name",
									"value": "Student",
									"type": "text"
								},
								{
									"key": "app_type",
									"value": "A",
									"type": "text"
								},
								{
									"key": "old_user_name",
									"value": "Guest1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}settings/change_username.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"change_username.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "profile_update_new",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}settings/profile_update_new.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"profile_update_new.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "sp_hostel_details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{path}}settings/sp_hostel_details.php",
							"host": [
								"{{path}}settings"
							],
							"path": [
								"sp_hostel_details.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "manager_counsellor_detail_profile_view",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"user_code\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"Counsellor\"]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"user_code\"]\r",
									"};\r",
									"\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const validate = ajv.compile(schema);\r",
									"\r",
									"const formData = {\r",
									"    \"user_code\": pm.variables.get(\"user_code\")\r",
									"};\r",
									"\r",
									"console.log(\"Form Data:\", formData);\r",
									"\r",
									"const valid = validate(formData);\r",
									"\r",
									"if (!valid) {\r",
									"    console.log(\"Validation failed:\", validate.errors);\r",
									"    pm.test(\"Schema validation failed\", function () {\r",
									"        throw new Error(\"Schema validation failed: \" + JSON.stringify(validate.errors));\r",
									"    });\r",
									"} else {\r",
									"    console.log(\"Validation passed\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Define the expected response schema\r",
									"const expectedResponseSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": { \"type\": \"boolean\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"photo\": { \"type\": \"string\", \"format\": \"uri\" },\r",
									"                    \"user_code\": { \"type\": \"string\" },\r",
									"                    \"hostel_code\": { \"type\": \"string\" },\r",
									"                    \"first_name\": { \"type\": \"string\" },\r",
									"                    \"middle_name\": { \"type\": \"string\" },\r",
									"                    \"last_name\": { \"type\": \"string\" },\r",
									"                    \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"                    \"mobile_number\": { \"type\": \"string\", \"pattern\": \"^\\\\+\\\\d{1,3} \\\\d{10}$\" },\r",
									"                    \"address_main_id\": { \"type\": \"integer\" },\r",
									"                    \"address_line_1\": { \"type\": \"string\" },\r",
									"                    \"address_line_2\": { \"type\": \"string\" },\r",
									"                    \"city\": { \"type\": \"string\" },\r",
									"                    \"taluka\": { \"type\": \"string\" },\r",
									"                    \"district\": { \"type\": \"string\" },\r",
									"                    \"pincode\": { \"type\": \"integer\", \"minimum\": 100000, \"maximum\": 999999 },\r",
									"                    \"state\": { \"type\": \"string\" },\r",
									"                    \"country\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"photo\",\r",
									"                    \"user_code\",\r",
									"                    \"hostel_code\",\r",
									"                    \"first_name\",\r",
									"                    \"middle_name\",\r",
									"                    \"last_name\",\r",
									"                    \"email\",\r",
									"                    \"mobile_number\",\r",
									"                    \"address_main_id\",\r",
									"                    \"address_line_1\",\r",
									"                    \"address_line_2\",\r",
									"                    \"city\",\r",
									"                    \"taluka\",\r",
									"                    \"district\",\r",
									"                    \"pincode\",\r",
									"                    \"state\",\r",
									"                    \"country\"\r",
									"                ]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"status\", \"message\", \"data\"]\r",
									"};\r",
									"\r",
									"// Define a mock response for testing purposes\r",
									"const mockResponse = {\r",
									"    \"status\": true,\r",
									"    \"message\": \"Counsellor Info\",\r",
									"    \"data\": [\r",
									"        {\r",
									"            \"photo\": \"https://glexas.com/hostel_data/Profile_img/Counsellor_1.jpg\",\r",
									"            \"user_code\": \"Counsellor\",\r",
									"            \"hostel_code\": \"ohm\",\r",
									"            \"first_name\": \"\",\r",
									"            \"middle_name\": \"Mayankbhai\",\r",
									"            \"last_name\": \"patel\",\r",
									"            \"email\": \"Dinesh@gmail.com\",\r",
									"            \"mobile_number\": \"+91 8994846746\",\r",
									"            \"address_main_id\": 1,\r",
									"            \"address_line_1\": \"b7\",\r",
									"            \"address_line_2\": \"ganesh society\",\r",
									"            \"city\": \"balasinor\",\r",
									"            \"taluka\": \"balasinor\",\r",
									"            \"district\": \"mahisagar\",\r",
									"            \"pincode\": 388255,\r",
									"            \"state\": \"Gujarat\",\r",
									"            \"country\": \"india\"\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"\r",
									"// Parse the mock response as JSON\r",
									"const responseBodyJson = mockResponse;  // Replace this with pm.response.json() in actual API testing\r",
									"\r",
									"// Validate the response body against the expected schema\r",
									"pm.test(\"Response body matches expected schema\", function () {\r",
									"    pm.expect(tv4.validate(responseBodyJson, expectedResponseSchema)).to.be.true;\r",
									"});\r",
									"\r",
									"// Test case for status\r",
									"pm.test(\"Response has a status of true\", function () {\r",
									"    pm.expect(responseBodyJson.status).to.be.true;\r",
									"});\r",
									"\r",
									"// Test case for the message\r",
									"pm.test(\"Response message indicates 'Counsellor Info'\", function () {\r",
									"    pm.expect(responseBodyJson.message).to.equal(\"Counsellor Info\");\r",
									"});\r",
									"\r",
									"// Test case for data array length\r",
									"pm.test(\"Response data array has at least one item\", function () {\r",
									"    pm.expect(responseBodyJson.data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test case for validating individual items in data array\r",
									"pm.test(\"Response data items match schema\", function () {\r",
									"    responseBodyJson.data.forEach(function (item) {\r",
									"        pm.expect(tv4.validate(item, expectedResponseSchema.properties.data.items)).to.be.true;\r",
									"    });\r",
									"});\r",
									"\r",
									"// Additional test cases as needed\r",
									"// Test case for specific fields\r",
									"pm.test(\"Response data has correct user details\", function () {\r",
									"    const user = responseBodyJson.data[0];\r",
									"    pm.expect(user.photo).to.equal(\"https://glexas.com/hostel_data/Profile_img/Counsellor_1.jpg\");\r",
									"    pm.expect(user.user_code).to.equal(\"Counsellor\");\r",
									"    pm.expect(user.email).to.equal(\"Dinesh@gmail.com\");\r",
									"    pm.expect(user.mobile_number).to.equal(\"+91 8994846746\");\r",
									"    pm.expect(user.pincode).to.equal(388255);\r",
									"    pm.expect(user.state).to.equal(\"Gujarat\");\r",
									"    pm.expect(user.country).to.equal(\"india\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_code",
									"value": "Counsellor",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}user/manager_counsellor_detail_profile_view.php",
							"host": [
								"{{path}}user"
							],
							"path": [
								"manager_counsellor_detail_profile_view.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_counsellor_list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Define the JSON schema for validation\r",
									"const jsonSchema = {\r",
									"  type: 'object',\r",
									"  properties: {\r",
									"    status: { type: 'boolean' },\r",
									"    message: { type: 'string' },\r",
									"    data: {\r",
									"      type: 'array',\r",
									"      items: {\r",
									"        type: 'object',\r",
									"        properties: {\r",
									"          photo: { type: 'string', format: 'uri' },\r",
									"          user_code: { type: 'string' },\r",
									"          first_name: { type: 'string', minLength: 1 },\r",
									"          last_name: { type: 'string', minLength: 1 },\r",
									"          mobile_number: { type: 'string', pattern: '^\\\\+91\\\\s[0-9]{10}$' },\r",
									"          number_of_student: { type: 'string', pattern: '^[0-9]+$' },\r",
									"        },\r",
									"        required: ['photo', 'user_code', 'first_name', 'last_name', 'mobile_number', 'number_of_student'],\r",
									"      },\r",
									"    },\r",
									"  },\r",
									"  required: ['status', 'message', 'data'],\r",
									"};\r",
									"\r",
									"// Validate the response against the JSON schema\r",
									"pm.test('Response is valid', function() {\r",
									"  const responseBody = pm.response.json();\r",
									"\r",
									"  pm.expect(tv4.validate(responseBody, jsonSchema)).to.be.true;\r",
									"});\r",
									"\r",
									"// Test case: Check if the status field is present and is a boolean\r",
									"pm.test('Status field check', function() {\r",
									"  pm.expect(pm.response.json()).to.have.property('status').that.is.a('boolean');\r",
									"});\r",
									"\r",
									"// Test case: Check if the message field is present and is a string\r",
									"pm.test('Message field check', function() {\r",
									"  pm.expect(pm.response.json()).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"// Test case: Check if the data field is present and is an array\r",
									"pm.test('Data field check', function() {\r",
									"  pm.expect(pm.response.json()).to.have.property('data').that.is.an('array');\r",
									"});\r",
									"\r",
									"// Test case: Check if each object in the data array has all required properties\r",
									"pm.test('Data object properties check', function() {\r",
									"  const data = pm.response.json().data;\r",
									"  data.forEach(obj => {\r",
									"    pm.expect(obj).to.have.all.keys('photo', 'user_code', 'first_name', 'last_name', 'mobile_number', 'number_of_student');\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test case: Check if each object's photo URL is valid\r",
									"pm.test('Photo URL format check', function() {\r",
									"  const data = pm.response.json().data;\r",
									"  data.forEach(obj => {\r",
									"    pm.expect(obj.photo).to.match(/^https?:\\/\\/.*$/);\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test case: Check if each object's mobile number is in the correct format\r",
									"pm.test('Mobile number format check', function() {\r",
									"  const data = pm.response.json().data;\r",
									"  data.forEach(obj => {\r",
									"    pm.expect(obj.mobile_number).to.match(/^\\+91\\s[0-9]{10}$/);\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test case: Check if each object's number of students is a non-negative integer\r",
									"pm.test('Number of students format check', function() {\r",
									"  const data = pm.response.json().data;\r",
									"  data.forEach(obj => {\r",
									"    pm.expect(obj.number_of_student).to.match(/^[0-9]+$/);\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test case: Check if the length of the data array matches the number of objects\r",
									"pm.test('Array length check', function() {\r",
									"  const data = pm.response.json().data;\r",
									"  pm.expect(data.length).to.equal(data.length);\r",
									"});\r",
									"\r",
									"// Test case: Check if each object's first name and last name are not empty\r",
									"pm.test('First name and last name check', function() {\r",
									"  const data = pm.response.json().data;\r",
									"  data.forEach(obj => {\r",
									"    pm.expect(obj.first_name).to.not.be.empty;\r",
									"    pm.expect(obj.last_name).to.not.be.empty;\r",
									"  });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{path}}user/manager_counsellor_list.php",
							"host": [
								"{{path}}user"
							],
							"path": [
								"manager_counsellor_list.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_parent_detail_profile_view",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// JSON schema for the response\r",
									"const schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"photo\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"user_code\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"parent_main_id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"first_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"middle_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"last_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"email\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"format\": \"email\"\r",
									"                    },\r",
									"                    \"country_code\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"mobile_number\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"address_main_id\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"address_line_1\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"address_line_2\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"city\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"taluka\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"district\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"pincode\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"state\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"country\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"user_code_student\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"hostel_code\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"student_first_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"student_middle_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"student_last_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"student_mobile_number\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"room_name\": {\r",
									"                        \"type\": [\"string\", \"null\"]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"user_code\",\r",
									"                    \"parent_main_id\",\r",
									"                    \"first_name\",\r",
									"                    \"email\"\r",
									"                ]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"status\",\r",
									"        \"message\",\r",
									"        \"data\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"// Validate response against schema\r",
									"pm.test(\"Response body should match schema\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// Validate response data\r",
									"pm.test(\"Response status should be true\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be 'Parent Info'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Parent Info\");\r",
									"});\r",
									"\r",
									"pm.test(\"Number of objects in data array should be 1\", function () {\r",
									"    pm.expect(pm.response.json().data.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Each object in data should have user_code, parent_main_id, first_name, and email fields\", function () {\r",
									"    pm.response.json().data.forEach(function (item) {\r",
									"        pm.expect(item).to.have.property(\"user_code\").that.is.a(\"string\");\r",
									"        pm.expect(item).to.have.property(\"parent_main_id\").that.is.a(\"number\");\r",
									"        pm.expect(item).to.have.property(\"first_name\").that.is.a(\"string\");\r",
									"        pm.expect(item).to.have.property(\"email\").that.is.a(\"string\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"room_name should be either a string or null\", function () {\r",
									"    pm.response.json().data.forEach(function (item) {\r",
									"        if (item.room_name !== null) {\r",
									"            pm.expect(item.room_name).to.be.a(\"string\");\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Email field should be in correct format\", function () {\r",
									"    pm.response.json().data.forEach(function (item) {\r",
									"        pm.expect(item.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Mobile number field should be in correct format\", function () {\r",
									"    pm.response.json().data.forEach(function (item) {\r",
									"        pm.expect(item.mobile_number).to.match(/^\\+?\\d{10,12}$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Valid input with all fields\r",
									"pm.test(\"Valid input with all fields\", function() {\r",
									"    pm.response.to.have.jsonBody('status', true);\r",
									"    pm.response.to.have.jsonBody('message', 'Parent Info');\r",
									"    pm.response.to.have.jsonBody('data', pm.iterationData.get('validData'));\r",
									"});\r",
									"\r",
									"// Invalid status and message\r",
									"pm.test(\"Invalid status and message\", function() {\r",
									"    pm.response.to.have.jsonBody('status', false);\r",
									"    pm.response.to.have.jsonBody('message', 'Error message');\r",
									"});\r",
									"\r",
									"// Empty data array\r",
									"pm.test(\"Empty data array\", function() {\r",
									"    pm.response.to.have.jsonBody('data', []);\r",
									"});\r",
									"\r",
									"// Single object in the data array\r",
									"pm.test(\"Single object in the data array\", function() {\r",
									"    pm.response.to.have.jsonBody('data', [pm.iterationData.get('validData')]);\r",
									"});\r",
									"\r",
									"// Email format\r",
									"pm.test(\"Email format\", function() {\r",
									"    pm.response.to.have.jsonBody('data[0].email', 'xyz@gmail.com');\r",
									"});\r",
									"\r",
									"// Mobile number format\r",
									"pm.test(\"Mobile number format\", function() {\r",
									"    pm.response.to.have.jsonBody('data[0].mobile_number', '+919876543210');\r",
									"});\r",
									"\r",
									"// Maximum values for numeric fields\r",
									"pm.test(\"Maximum values for numeric fields\", function() {\r",
									"    pm.response.to.have.jsonBody('data[0].parent_main_id', 2147483647);\r",
									"});\r",
									"\r",
									"// Minimum and maximum lengths for string fields\r",
									"pm.test(\"Minimum and maximum lengths for string fields\", function() {\r",
									"    pm.response.to.have.jsonBody('data[0].first_name', 'A');\r",
									"    pm.response.to.have.jsonBody('data[0].last_name', 'B');\r",
									"});\r",
									"\r",
									"// Special characters in strings\r",
									"pm.test(\"Special characters in strings\", function() {\r",
									"    pm.response.to.have.jsonBody('data[0].first_name', '!@#$%^&*');\r",
									"});\r",
									"\r",
									"// Empty string values\r",
									"pm.test(\"Empty string values\", function() {\r",
									"    pm.response.to.have.jsonBody('data[0].first_name', '');\r",
									"    pm.response.to.have.jsonBody('data[0].last_name', '');\r",
									"});\r",
									"// Check if user role is allowed to access the resource\r",
									"// pm.test(\"User role should be allowed\", function() {\r",
									"//     console.log(\"Response body:\", pm.response.json());\r",
									"    \r",
									"//     // Extract user role from the response\r",
									"//     const userRole = pm.response.json().data[0].user_role;\r",
									"//     console.log(\"User role:\", userRole);\r",
									"\r",
									"//     // Check if user role is one of the allowed roles\r",
									"//     const allowedRoles = [\"manager\", \"parent\", \"rector\", \"superadmin\"];\r",
									"//     pm.expect(allowedRoles.includes(userRole)).to.be.true;\r",
									"// });\r",
									"\r",
									"\r",
									"// Post-response script\r",
									"pm.environment.set(\"user_code\", pm.response.json().data[0].user_code);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the JSON schema\r",
									"const schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"user_code\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"Parent\"]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"user_code\"]\r",
									"};\r",
									"\r",
									"// Parse form data from the request body\r",
									"const formData = {};\r",
									"const requestBody = pm.request.body;\r",
									"if (requestBody && requestBody.mode === 'formdata') {\r",
									"    for (let i = 0; i < requestBody.formdata.length; i++) {\r",
									"        const data = requestBody.formdata[i];\r",
									"        if (data.type === 'text') {\r",
									"            formData[data.key] = data.value;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"console.log('Form Data:', formData);\r",
									"\r",
									"// Validate the form data against the schema\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv({allErrors: true});\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(formData);\r",
									"\r",
									"if (!valid) {\r",
									"    console.error('Validation errors:', validate.errors);\r",
									"    pm.environment.set('validationError', JSON.stringify(validate.errors));\r",
									"    postman.setNextRequest(null); // Prevent the request from being sent\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_code",
									"value": "Parent",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}user/manager_parent_detail_profile_view.php",
							"host": [
								"{{path}}user"
							],
							"path": [
								"manager_parent_detail_profile_view.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_parent_list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// JSON schema for the response\r",
									"const schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": {\"type\": \"boolean\"},\r",
									"        \"message\": {\"type\": \"string\"},\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"photo\": {\r",
									"                        \"oneOf\": [\r",
									"                            {\"type\": \"boolean\"},\r",
									"                            {\"type\": \"string\", \"format\": \"uri\"}\r",
									"                        ]\r",
									"                    },\r",
									"                    \"user_code\": {\"type\": \"string\"},\r",
									"                    \"first_name\": {\"type\": \"string\"},\r",
									"                    \"middle_name\": {\"type\": \"string\"},\r",
									"                    \"last_name\": {\"type\": \"string\"},\r",
									"                    \"mobile_number\": {\"type\": \"string\"}\r",
									"                },\r",
									"                \"required\": [\"photo\", \"user_code\", \"first_name\", \"middle_name\", \"last_name\", \"mobile_number\"]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"status\", \"message\", \"data\"]\r",
									"};\r",
									"\r",
									"// Test cases to validate the response\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    pm.response.to.have.jsonBody(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response data is not empty and contains expected fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;\r",
									"    jsonData.data.forEach(function (item) {\r",
									"        pm.expect(item).to.have.all.keys('photo', 'user_code', 'first_name', 'middle_name', 'last_name', 'mobile_number');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Photo URLs are valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.data.forEach(function (item) {\r",
									"        if (item.photo && typeof item.photo === 'string') {\r",
									"            pm.expect(item.photo).to.match(/^https?:\\/\\/.*$/);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Data types in response are correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.data.forEach(function (item) {\r",
									"        pm.expect(item.photo).to.be.oneOf([true, false, null]);\r",
									"        pm.expect(item.user_code).to.be.a('string');\r",
									"        pm.expect(item.first_name).to.be.a('string');\r",
									"        pm.expect(item.middle_name).to.be.a('string');\r",
									"        pm.expect(item.last_name).to.be.a('string');\r",
									"        pm.expect(item.mobile_number).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mobile numbers have valid format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.data.forEach(function (item) {\r",
									"        pm.expect(item.mobile_number).to.match(/^\\+\\d{2}\\s\\d{10}$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Data objects with photo field have non-null photo URLs\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.data.forEach(function (item) {\r",
									"        if (item.photo === true) {\r",
									"            pm.expect(item.photo).to.be.true;\r",
									"        } else if (typeof item.photo === 'string') {\r",
									"            pm.expect(item.photo).to.not.be.null;\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JSON schema for the request data\r",
									"const schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"flag\": {\r",
									"            \"type\": [\"string\", \"null\"],\r",
									"            \"enum\": [\"active\", \"linked_student\", \"allocated_room_student\", null]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"flag\"]\r",
									"};\r",
									"\r",
									"// Print the form data\r",
									"console.log(\"Form data:\", pm.request.body.toJSON());\r",
									"\r",
									"// Validate the request body against the schema\r",
									"pm.test(\"Request body has valid format\", function() {\r",
									"    const jsonData = pm.request.body.toJSON();\r",
									"    const validationResult = tv4.validate(jsonData, schema);\r",
									"\r",
									"    if (!validationResult) {\r",
									"        console.error(\"Request body validation failed:\", tv4.error.message);\r",
									"        console.error(\"Request body:\", jsonData);\r",
									"        pm.response.to.have.status(400);\r",
									"        pm.response.to.have.jsonBody({\r",
									"            \"error\": \"Invalid request body format\"\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test case for checking if the flag is one of the expected values or null\r",
									"pm.test(\"Flag is one of 'active', 'linked_student', 'allocated_room_student', or null\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.data.forEach(function (item) {\r",
									"        pm.expect(item.flag).to.be.oneOf(['active', 'linked_student', 'allocated_room_student', null]);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test case for checking if all data objects have the 'flag' field\r",
									"pm.test(\"All data objects have the 'flag' field\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.data.forEach(function (item) {\r",
									"        pm.expect(item).to.have.property('flag');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test case for checking if 'flag' field is a string or null\r",
									"pm.test(\"The 'flag' field is a string or null\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.data.forEach(function (item) {\r",
									"        pm.expect(item.flag).to.satisfy(function (value) {\r",
									"            return typeof value === 'string' || value === null;\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "flag",
									"value": "",
									"type": "text"
								},
								{
									"key": "flag",
									"value": "active",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "linked_student",
									"type": "text",
									"disabled": true
								},
								{
									"key": "flag",
									"value": "allocated_room_student",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}user/manager_parent_list.php",
							"host": [
								"{{path}}user"
							],
							"path": [
								"manager_parent_list.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_student_details_from_counsellor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Import the schema validator library\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"// Define the JSON schema for the form data\r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"key\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"value\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"key\", \"value\"]\r",
									"  }\r",
									"};\r",
									"\r",
									"// Log the entire request body\r",
									"console.log(\"Request Body:\", pm.request.body);\r",
									"\r",
									"// Get the form data from the request and convert it to an object\r",
									"const formData = pm.request.body.formdata.map(item => ({\r",
									"  key: item.key,\r",
									"  value: item.value\r",
									"}));\r",
									"\r",
									"// Validate the form data against the schema\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(formData);\r",
									"\r",
									"// Set an environment variable to indicate if the form data is valid\r",
									"pm.environment.set('formDataValid', valid.toString());\r",
									"\r",
									"// Log the form data and validation result\r",
									"console.log(\"Form Data:\", formData);\r",
									"console.log(\"Validation Result:\", valid);\r",
									"\r",
									"// Test Case for Valid Form Data\r",
									"pm.test(\"Form data is valid\", function() {\r",
									"  pm.expect(pm.environment.get('formDataValid')).to.equal('true');\r",
									"});\r",
									"\r",
									"// Test Case for User Code Presence\r",
									"pm.test(\"User code is present\", function() {\r",
									"    const userCodeField = pm.request.body.formdata.find(item => item.key === 'user_code');\r",
									"    pm.expect(userCodeField).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"// Test Case for Flag Value\r",
									"pm.test(\"Flag value is valid\", function() {\r",
									"    const flagField = pm.request.body.formdata.find(item => item.key === 'flag');\r",
									"    const flagValue = flagField ? flagField.value : null;\r",
									"    pm.expect(['general', 'room_allocated', null]).to.include(flagValue);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Import the schema validator library\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"// Define the JSON schema\r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"photo\": {\r",
									"            \"type\": \"string\",\r",
									"            \"oneOf\": [\r",
									"              {\"type\": \"string\", \"format\": \"uri\", \"pattern\": \"^https?:\\/\\/.*\"},\r",
									"              {\"type\": \"string\", \"pattern\": \"^$\"} // Allow empty string\r",
									"            ]\r",
									"          },\r",
									"          \"student_main_id\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"hostel_code\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"user_code\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"room_name\": {\r",
									"            \"type\": [\"string\", \"null\"]\r",
									"          },\r",
									"          \"first_name\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"middle_name\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"last_name\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"mobile_number\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"country_code\": {\r",
									"            \"type\": \"string\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\"photo\", \"student_main_id\", \"hostel_code\", \"user_code\", \"first_name\", \"middle_name\", \"last_name\", \"mobile_number\", \"country_code\"]\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"status\", \"message\", \"data\"]\r",
									"};\r",
									"\r",
									"// Get the response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Validate the response against the schema\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(response);\r",
									"\r",
									"if (valid) {\r",
									"  pm.test(\"Response is valid\", function() {\r",
									"    pm.expect(valid).to.be.true;\r",
									"  });\r",
									"} else {\r",
									"  pm.test(\"Response is valid\", function() {\r",
									"    pm.expect(validate.errors).to.be.null;\r",
									"  });\r",
									"}\r",
									"\r",
									"// Additional Test Cases\r",
									"\r",
									"// Test Case for Valid Status and Message Fields\r",
									"pm.test(\"Status and message fields are valid\", function() {\r",
									"  pm.expect(response).to.have.property('status').that.is.a('boolean');\r",
									"  pm.expect(response).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"// Test Case for Data Array Structure\r",
									"pm.test(\"Data is an array\", function() {\r",
									"  pm.expect(response).to.have.property('data').that.is.an('array');\r",
									"});\r",
									"\r",
									"// Test Case for Each Data Object Properties\r",
									"pm.test(\"Each data object has the required properties\", function() {\r",
									"  response.data.forEach(function(item) {\r",
									"    pm.expect(item).to.have.property('photo').that.is.a('string');\r",
									"    pm.expect(item).to.have.property('student_main_id').that.is.a('number');\r",
									"    pm.expect(item).to.have.property('hostel_code').that.is.a('string');\r",
									"    pm.expect(item).to.have.property('user_code').that.is.a('string');\r",
									"    pm.expect(item).to.have.property('first_name').that.is.a('string');\r",
									"    pm.expect(item).to.have.property('middle_name').that.is.a('string');\r",
									"    pm.expect(item).to.have.property('last_name').that.is.a('string');\r",
									"    pm.expect(item).to.have.property('mobile_number').that.is.a('number');\r",
									"    pm.expect(item).to.have.property('country_code').that.is.a('string');\r",
									"    pm.expect(item).to.have.property('room_name').that.is.oneOf(['string', 'null']);\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test Case for Valid Photo URLs\r",
									"pm.test(\"Photo URLs are valid or empty\", function() {\r",
									"  response.data.forEach(function(item) {\r",
									"    if (item.photo) {\r",
									"      pm.expect(item.photo).to.match(/^https?:\\/\\/.*/);\r",
									"    } else {\r",
									"      pm.expect(item.photo).to.equal('');\r",
									"    }\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test Case for Mobile Numbers\r",
									"pm.test(\"Mobile numbers are valid\", function() {\r",
									"  response.data.forEach(function(item) {\r",
									"    pm.expect(item.mobile_number).to.be.a('number');\r",
									"    pm.expect(item.mobile_number.toString()).to.have.lengthOf.at.least(10); // assuming a minimum length for mobile numbers\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test Case for Country Codes\r",
									"pm.test(\"Country codes are valid\", function() {\r",
									"  response.data.forEach(function(item) {\r",
									"    pm.expect(item.country_code).to.be.a('string');\r",
									"    // Add more specific checks for country code format if needed\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test Case for Optional Room Name\r",
									"pm.test(\"Room name can be null or a string\", function() {\r",
									"  response.data.forEach(function(item) {\r",
									"    pm.expect(item.room_name).to.be.oneOf([null, pm.expect(item.room_name).to.be.a('string')]);\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test Case for Required Fields\r",
									"pm.test(\"Each data object has all required fields\", function() {\r",
									"  response.data.forEach(function(item) {\r",
									"    pm.expect(item).to.have.all.keys('photo', 'student_main_id', 'hostel_code', 'user_code', 'first_name', 'middle_name', 'last_name', 'mobile_number', 'country_code', 'room_name');\r",
									"  });\r",
									"});\r",
									"\r",
									"// Test Case for Valid JSON Schema\r",
									"pm.test(\"Response matches JSON schema\", function() {\r",
									"  const validate = ajv.compile(schema);\r",
									"  const valid = validate(response);\r",
									"  pm.expect(valid).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_code",
									"value": "Counsellor",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}user/manager_student_details_from_counsellor.php",
							"host": [
								"{{path}}user"
							],
							"path": [
								"manager_student_details_from_counsellor.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_student_list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Define the JSON schema for the response\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": { \"type\": \"boolean\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"photo\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"student_main_id\": { \"type\": \"string\" },\r",
									"                    \"user_code\": { \"type\": \"string\" },\r",
									"                    \"first_name\": { \"type\": \"string\" },\r",
									"                    \"middle_name\": { \"type\": \"string\" },\r",
									"                    \"last_name\": { \"type\": \"string\" },\r",
									"                    \"mobile_number\": { \"type\": \"string\" },\r",
									"                    \"room_name\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"room_main_id\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"branch_building_name\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"next_fees\": { \"type\": \"string\" },\r",
									"                    \"total_fees\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"photo\",\r",
									"                    \"student_main_id\",\r",
									"                    \"user_code\",\r",
									"                    \"first_name\",\r",
									"                    \"middle_name\",\r",
									"                    \"last_name\",\r",
									"                    \"mobile_number\",\r",
									"                    \"room_name\",\r",
									"                    \"room_main_id\",\r",
									"                    \"branch_building_name\",\r",
									"                    \"next_fees\",\r",
									"                    \"total_fees\"\r",
									"                ]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"status\", \"message\", \"data\"]\r",
									"};\r",
									"\r",
									"// Validate the response against the schema\r",
									"pm.test(\"Response matches schema\", function() {\r",
									"    pm.response.to.have.jsonBody(schema);\r",
									"});\r",
									"\r",
									"// Test case for status field\r",
									"pm.test(\"Status is a boolean\", function() {\r",
									"    pm.expect(pm.response.json().status).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"// Test case for message field\r",
									"pm.test(\"Message is a string\", function() {\r",
									"    pm.expect(pm.response.json().message).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Test case for data field\r",
									"pm.test(\"Data is an array\", function() {\r",
									"    pm.expect(pm.response.json().data).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Test case for each item in the data array\r",
									"pm.test(\"Each item in data array has required fields\", function() {\r",
									"    pm.response.json().data.forEach(function(item) {\r",
									"        pm.expect(item.photo).to.satisfy(function (val) {\r",
									"            return val === null || typeof val === 'string';\r",
									"        });\r",
									"        pm.expect(item.student_main_id).to.be.a('string');\r",
									"        pm.expect(item.user_code).to.be.a('string');\r",
									"        pm.expect(item.first_name).to.be.a('string');\r",
									"        pm.expect(item.middle_name).to.be.a('string');\r",
									"        pm.expect(item.last_name).to.be.a('string');\r",
									"        pm.expect(item.mobile_number).to.be.a('string');\r",
									"        pm.expect(item.room_name).to.satisfy(function (val) {\r",
									"            return val === null || typeof val === 'string';\r",
									"        });\r",
									"        pm.expect(item.room_main_id).to.satisfy(function (val) {\r",
									"            return val === null || typeof val === 'string';\r",
									"        });\r",
									"        pm.expect(item.branch_building_name).to.satisfy(function (val) {\r",
									"            return val === null || typeof val === 'string';\r",
									"        });\r",
									"        pm.expect(item.next_fees).to.be.a('string');\r",
									"        pm.expect(item.total_fees).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"// Test case to check if all items in the data array have unique student_main_id\r",
									"pm.test(\"All items in data array have unique student_main_id\", function() {\r",
									"    const studentMainIds = new Set(pm.response.json().data.map(item => item.student_main_id));\r",
									"    pm.expect(studentMainIds.size).to.eql(pm.response.json().data.length);\r",
									"});\r",
									"\r",
									"// Test case to check if all mobile numbers are valid phone numbers\r",
									"pm.test(\"All mobile numbers are valid phone numbers\", function() {\r",
									"    pm.response.json().data.forEach(function(item) {\r",
									"        pm.expect(item.mobile_number).to.match(/^\\+\\d{1,3}\\s\\d{10}$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test case to check if room_main_id is present when room_name is not null\r",
									"pm.test(\"room_main_id is present when room_name is not null\", function() {\r",
									"    pm.response.json().data.forEach(function(item) {\r",
									"        if (item.room_name !== null) {\r",
									"            pm.expect(item.room_main_id).to.not.be.null;\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test case to check if total_fees is a non-negative integer\r",
									"pm.test(\"total_fees is a non-negative integer\", function() {\r",
									"    pm.response.json().data.forEach(function(item) {\r",
									"        pm.expect(Number(item.total_fees)).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(Number(item.total_fees) % 1).to.eql(0);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the JSON schema for the request body\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"student_type\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"active\", \"inactive\", \"allocated\", \"unallocated\", \"uarStudent\"]\r",
									"        },\r",
									"        \"module_name\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"fees\", \"room\"]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"student_type\", \"module_name\"]\r",
									"};\r",
									"\r",
									"// Validate the request body against the schema\r",
									"pm.test(\"Request body matches schema\", function() {\r",
									"    const body = pm.request.body;\r",
									"    pm.expect(body).to.be.json;\r",
									"    pm.expect(body).to.have.jsonBody(schema);\r",
									"});\r",
									"\r",
									"// Test case to check if student_type is provided\r",
									"pm.test(\"student_type is provided\", function() {\r",
									"    pm.expect(pm.request.body.hasOwnProperty(\"student_type\")).to.be.true;\r",
									"});\r",
									"\r",
									"// Test case to check if module_name is provided\r",
									"pm.test(\"module_name is provided\", function() {\r",
									"    pm.expect(pm.request.body.hasOwnProperty(\"module_name\")).to.be.true;\r",
									"});\r",
									"\r",
									"// Test case to check if student_type is a string\r",
									"pm.test(\"student_type is a string\", function() {\r",
									"    pm.expect(pm.request.body.student_type).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Test case to check if module_name is a string\r",
									"pm.test(\"module_name is a string\", function() {\r",
									"    pm.expect(pm.request.body.module_name).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Test case to check if student_type is one of the allowed values\r",
									"pm.test(\"student_type is one of the allowed values\", function() {\r",
									"    const allowedStudentTypes = [\"active\", \"inactive\", \"allocated\", \"unallocated\", \"uarStudent\"];\r",
									"    pm.expect(allowedStudentTypes).to.include(pm.request.body.student_type);\r",
									"});\r",
									"\r",
									"// Test case to check if module_name is one of the allowed values\r",
									"pm.test(\"module_name is one of the allowed values\", function() {\r",
									"    const allowedModuleNames = [\"fees\", \"room\"];\r",
									"    pm.expect(allowedModuleNames).to.include(pm.request.body.module_name);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "student_type",
									"value": "active",
									"type": "text"
								},
								{
									"key": "student_type",
									"value": "inactive",
									"type": "text",
									"disabled": true
								},
								{
									"key": "student_type",
									"value": "allocated",
									"type": "text",
									"disabled": true
								},
								{
									"key": "student_type",
									"value": "unallocated",
									"type": "text",
									"disabled": true
								},
								{
									"key": "student_type",
									"value": "uarStudent",
									"type": "text",
									"disabled": true
								},
								{
									"key": "student_type",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "module_name",
									"value": "fees",
									"type": "text"
								},
								{
									"key": "module_name",
									"value": "room",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}user/manager_student_list.php",
							"host": [
								"{{path}}user"
							],
							"path": [
								"manager_student_list.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "student_detail_profile_view",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"// Define the schema\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"user_code\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"user_code\"]\r",
									"};\r",
									"\r",
									"// Define a list of valid user codes\r",
									"const validUserCodes = [\"Student\", \"Parent\", \"Counsellor\"];\r",
									"\r",
									"// Get the form data\r",
									"const formData = pm.request.body.formdata.reduce((acc, item) => {\r",
									"  acc[item.key] = item.value;\r",
									"  return acc;\r",
									"}, {});\r",
									"\r",
									"// Validate the form data against the schema\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(formData);\r",
									"\r",
									"// Define test cases\r",
									"pm.test(\"Schema validation\", function() {\r",
									"  pm.expect(valid).to.be.true;\r",
									"  if (!valid) {\r",
									"    console.log(validate.errors);\r",
									"  }\r",
									"});\r",
									"\r",
									"pm.test(\"Valid user_code\", function() {\r",
									"  pm.expect(validUserCodes.includes(formData.user_code)).to.be.true;\r",
									"});\r",
									"\r",
									"// Additional individual tests\r",
									"pm.test(\"Valid user_code - Student\", function() {\r",
									"  if (formData.user_code) {\r",
									"    pm.expect(formData.user_code).to.equal(\"Student\");\r",
									"  }\r",
									"});\r",
									"\r",
									"pm.test(\"Invalid user_code\", function() {\r",
									"  if (formData.user_code) {\r",
									"    pm.expect(validUserCodes.includes(formData.user_code)).to.be.false;\r",
									"  }\r",
									"});\r",
									"\r",
									"pm.test(\"Missing user_code\", function() {\r",
									"  pm.expect(formData.user_code).to.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Empty user_code\", function() {\r",
									"  if (formData.user_code !== undefined) {\r",
									"    pm.expect(formData.user_code).to.equal(\"\");\r",
									"  }\r",
									"});\r",
									"\r",
									"pm.test(\"User_code with extra whitespace\", function() {\r",
									"  if (formData.user_code) {\r",
									"    pm.expect(formData.user_code.trim()).to.equal(\"Student\");\r",
									"  }\r",
									"});\r",
									"\r",
									"// Handle errors in pre-request validation\r",
									"if (!valid) {\r",
									"  throw new Error(\"Invalid request data\");\r",
									"}\r",
									"\r",
									"if (!validUserCodes.includes(formData.user_code)) {\r",
									"  throw new Error(\"Invalid user_code\");\r",
									"}\r",
									"\r",
									"// If validation passes, log the success message\r",
									"console.log(\"Request data is valid\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"// JSON schema definition\r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"photo\": { \"type\": \"string\" },\r",
									"          \"student_main_id\": { \"type\": \"integer\" },\r",
									"          \"user_code\": { \"type\": \"string\" },\r",
									"          \"first_name\": { \"type\": \"string\" },\r",
									"          \"middle_name\": { \"type\": \"string\" },\r",
									"          \"last_name\": { \"type\": \"string\" },\r",
									"          \"student_mobile_number\": { \"type\": \"string\" },\r",
									"          \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"          \"parent_main_id\": { \"type\": \"integer\" },\r",
									"          \"parent_user_code\": { \"type\": \"string\" },\r",
									"          \"parent_first_name\": { \"type\": \"string\" },\r",
									"          \"parent_middle_name\": { \"type\": \"string\" },\r",
									"          \"parent_last_name\": { \"type\": \"string\" },\r",
									"          \"parent_email\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"          \"parent_mobile_number\": { \"type\": \"string\" },\r",
									"          \"counsellor_user_code\": { \"type\": \"string\" },\r",
									"          \"counsellor_first_name\": { \"type\": \"string\" },\r",
									"          \"counsellor_middle_name\": { \"type\": \"string\" },\r",
									"          \"counsellor_last_name\": { \"type\": \"string\" },\r",
									"          \"counsellor_email\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"          \"counsellor_mobile_number\": { \"type\": \"string\" },\r",
									"          \"address_main_id\": { \"type\": \"integer\" },\r",
									"          \"address_line_1\": { \"type\": \"string\" },\r",
									"          \"address_line_2\": { \"type\": \"string\" },\r",
									"          \"taluka\": { \"type\": \"string\" },\r",
									"          \"city\": { \"type\": \"string\" },\r",
									"          \"district\": { \"type\": \"string\" },\r",
									"          \"pincode\": { \"type\": \"integer\" },\r",
									"          \"state\": { \"type\": \"string\" },\r",
									"          \"country\": { \"type\": \"string\" },\r",
									"          \"college_name\": { \"type\": \"string\" },\r",
									"          \"department_name\": { \"type\": \"string\" },\r",
									"          \"college_enrollment_id\": { \"type\": \"string\" },\r",
									"          \"hostel_name\": { \"type\": \"string\" },\r",
									"          \"block_name\": { \"type\": [\"string\", \"null\"] },\r",
									"          \"room_name\": { \"type\": [\"string\", \"null\"] },\r",
									"          \"rector_first_name\": { \"type\": [\"string\", \"null\"] },\r",
									"          \"rector_last_name\": { \"type\": [\"string\", \"null\"] },\r",
									"          \"rector_phone_number\": { \"type\": [\"string\", \"null\"] },\r",
									"          \"admission_date\": { \"type\": \"string\", \"format\": \"date\" }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"photo\",\r",
									"          \"student_main_id\",\r",
									"          \"user_code\",\r",
									"          \"first_name\",\r",
									"          \"middle_name\",\r",
									"          \"last_name\",\r",
									"          \"student_mobile_number\",\r",
									"          \"email\",\r",
									"          \"parent_main_id\",\r",
									"          \"parent_user_code\",\r",
									"          \"parent_first_name\",\r",
									"          \"parent_middle_name\",\r",
									"          \"parent_last_name\",\r",
									"          \"parent_email\",\r",
									"          \"parent_mobile_number\",\r",
									"          \"counsellor_user_code\",\r",
									"          \"counsellor_first_name\",\r",
									"          \"counsellor_middle_name\",\r",
									"          \"counsellor_last_name\",\r",
									"          \"counsellor_email\",\r",
									"          \"counsellor_mobile_number\",\r",
									"          \"address_main_id\",\r",
									"          \"address_line_1\",\r",
									"          \"address_line_2\",\r",
									"          \"taluka\",\r",
									"          \"city\",\r",
									"          \"district\",\r",
									"          \"pincode\",\r",
									"          \"state\",\r",
									"          \"country\",\r",
									"          \"college_name\",\r",
									"          \"department_name\",\r",
									"          \"college_enrollment_id\",\r",
									"          \"hostel_name\",\r",
									"          \"block_name\",\r",
									"          \"room_name\",\r",
									"          \"rector_first_name\",\r",
									"          \"rector_last_name\",\r",
									"          \"rector_phone_number\",\r",
									"          \"admission_date\"\r",
									"        ]\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"status\", \"message\", \"data\"]\r",
									"};\r",
									"\r",
									"// Validate the response using the schema\r",
									"const validate = ajv.compile(schema);\r",
									"const response = pm.response.json();\r",
									"const valid = validate(response);\r",
									"\r",
									"// Test if the response is valid\r",
									"pm.test(\"Response schema is valid\", function() {\r",
									"  pm.expect(valid).to.be.true;\r",
									"  if (!valid) {\r",
									"    console.log(validate.errors);\r",
									"  }\r",
									"});\r",
									"\r",
									"// Status code validation\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Response time validation\r",
									"pm.test(\"Response time is less than 200ms\", function() {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Specific field validations\r",
									"pm.test(\"Status is true\", function() {\r",
									"  pm.expect(pm.response.json().status).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Message is 'Student Info'\", function() {\r",
									"  pm.expect(pm.response.json().message).to.eql(\"Student Info\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array and not empty\", function() {\r",
									"  pm.expect(pm.response.json().data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Check if 'data' array is not empty before accessing its elements\r",
									"if (response.data && response.data.length > 0) {\r",
									"  const firstStudent = response.data[0];\r",
									"\r",
									"  pm.test(\"First student's photo is a string\", function() {\r",
									"    pm.expect(firstStudent.photo).to.be.a('string');\r",
									"  });\r",
									"\r",
									"  pm.test(\"First student's student_main_id is a number\", function() {\r",
									"    pm.expect(firstStudent.student_main_id).to.be.a('number');\r",
									"  });\r",
									"\r",
									"  pm.test(\"First student's email is a valid email\", function() {\r",
									"    pm.expect(firstStudent.email).to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/);\r",
									"  });\r",
									"\r",
									"  pm.test(\"First student's mobile number starts with +91\", function() {\r",
									"    pm.expect(firstStudent.student_mobile_number).to.match(/^\\+91/);\r",
									"  });\r",
									"} else {\r",
									"  pm.test(\"Data array is not empty\", function() {\r",
									"    pm.expect(response.data).to.be.an('array').that.is.not.empty;\r",
									"  });\r",
									"}\r",
									"\r",
									"// Test for valid request data\r",
									"pm.test(\"Request data is valid\", function() {\r",
									"  pm.expect(pm.environment.get(\"isRequestDataValid\")).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_code",
									"value": "Student",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}user/student_detail_profile_view.php",
							"host": [
								"{{path}}user"
							],
							"path": [
								"student_detail_profile_view.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "manager_student_remove",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the JSON schema for user_code\r",
									"const userCodeSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"user_code\": {\r",
									"      \"type\": \"string\",\r",
									"      \"pattern\": \"^[a-zA-Z]+\\\\d*$\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"user_code\"]\r",
									"};\r",
									"\r",
									"// Get the form data\r",
									"const userCode = pm.variables.get(\"user_code\");\r",
									"\r",
									"// Create data object for validation\r",
									"const userData = { \"user_code\": userCode };\r",
									"\r",
									"// Validate the user_code using tv4 (Postman's built-in JSON schema validator)\r",
									"const validationResult = tv4.validateMultiple(userData, userCodeSchema);\r",
									"\r",
									"if (!validationResult.valid) {\r",
									"  pm.environment.set(\"user_code_validation_errors\", JSON.stringify(validationResult.errors));\r",
									"  throw new Error(\"Validation failed: \" + JSON.stringify(validationResult.errors));\r",
									"}\r",
									"\r",
									"// If validation passes, clear any previous errors\r",
									"pm.environment.unset(\"user_code_validation_errors\");\r",
									"// Check if there were any validation errors in the pre-request script\r",
									"const validationErrors = pm.environment.get(\"user_code_validation_errors\");\r",
									"\r",
									"pm.test(\"User code validation\", function () {\r",
									"  pm.expect(validationErrors).to.be.undefined;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Define the JSON schema\r",
									"const responseSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"status\", \"message\"]\r",
									"};\r",
									"\r",
									"// Parse the response body\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Validate the response against the schema\r",
									"pm.test(\"Validate response schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"// Additional tests\r",
									"pm.test(\"Status is true\", function () {\r",
									"  pm.expect(responseJson.status).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Message is 'Student Removed Successfully'\", function () {\r",
									"  pm.expect(responseJson.message).to.equal(\"Student Removed Successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_code",
									"value": "Manager2",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}user/manager_student_remove.php",
							"host": [
								"{{path}}user"
							],
							"path": [
								"manager_student_remove.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "stay",
			"item": [
				{
					"name": "stay_hostel_list",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "flag",
									"value": "API",
									"type": "text"
								},
								{
									"key": "hostel_city",
									"value": "Anand1",
									"type": "text"
								},
								{
									"key": "flag",
									"value": "ACC",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}stay/stay_hostel_list.php",
							"host": [
								"{{path}}stay"
							],
							"path": [
								"stay_hostel_list.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "stay_registration",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_code",
									"value": "Guest4",
									"type": "text"
								},
								{
									"key": "student_first_name",
									"value": "akbdjnas",
									"type": "text"
								},
								{
									"key": "student_middle_name",
									"value": "asfnkjsd",
									"type": "text"
								},
								{
									"key": "student_last_name",
									"value": "andkjs",
									"type": "text"
								},
								{
									"key": "student_email",
									"value": "abc@gmail.com",
									"type": "text"
								},
								{
									"key": "student_phone_number",
									"value": "9510370434",
									"type": "text"
								},
								{
									"key": "is_verified",
									"value": "Y",
									"type": "text"
								},
								{
									"key": "phone_country_code",
									"value": "+91",
									"type": "text"
								},
								{
									"key": "student_pwd",
									"value": "123456",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local_path}}stay/stay_registration.php",
							"host": [
								"{{local_path}}stay"
							],
							"path": [
								"stay_registration.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "stay_profile_view.php",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_code",
									"value": "Student223",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}stay/stay_profile_view.php",
							"host": [
								"{{path}}stay"
							],
							"path": [
								"stay_profile_view.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "raj",
			"item": [
				{
					"name": "new_admission_crud",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"registration_main_id\": 1947\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}raj/new_admission_crud.php",
							"host": [
								"{{path}}raj"
							],
							"path": [
								"new_admission_crud.php"
							],
							"query": [
								{
									"key": "user_code",
									"value": "test1",
									"disabled": true
								},
								{
									"key": "first_name",
									"value": "abcd",
									"disabled": true
								},
								{
									"key": "middle_name",
									"value": "efgh",
									"disabled": true
								},
								{
									"key": "last_name",
									"value": "ijkl",
									"disabled": true
								},
								{
									"key": "phone_number",
									"value": "1234567894",
									"disabled": true
								},
								{
									"key": "phone_country_code",
									"value": "+91",
									"disabled": true
								},
								{
									"key": "email",
									"value": "abcd@efgh.com",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "new_admission_crud",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_code",
									"value": "test1",
									"disabled": true
								},
								{
									"key": "first_name",
									"value": "abcd",
									"disabled": true
								},
								{
									"key": "middle_name",
									"value": "efgh",
									"disabled": true
								},
								{
									"key": "last_name",
									"value": "ijkl",
									"disabled": true
								},
								{
									"key": "phone_number",
									"value": "1234567894",
									"disabled": true
								},
								{
									"key": "phone_country_code",
									"value": "+91",
									"disabled": true
								},
								{
									"key": "email",
									"value": "abcd@efgh.com",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{path}}raj/new_admission_crud.php",
							"host": [
								"{{path}}raj"
							],
							"path": [
								"new_admission_crud.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "new_admission_crud",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"registration_main_id\": 1947\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}raj/new_admission_crud.php",
							"host": [
								"{{path}}raj"
							],
							"path": [
								"new_admission_crud.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "new_admission_crud",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"registration_main_id\": 1947,\r\n    \"user_code\": \"Student\",\r\n    \"first_name\": \"abcd\",\r\n    \"middle_name\": \"efgh\",\r\n    \"last_name\": \"ijkl\",\r\n    \"phone_number\": 1234567896,\r\n    \"phone_country_code\": \"+91\",\r\n    \"email\": \"abcd@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}raj/new_admission_crud.php",
							"host": [
								"{{path}}raj"
							],
							"path": [
								"new_admission_crud.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "new_admission",
			"item": [
				{
					"name": "manager_new_admission_list",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "search_user_role",
									"value": "Student",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{path}}new_admission/manager_new_admission_list.php",
							"host": [
								"{{path}}new_admission"
							],
							"path": [
								"manager_new_admission_list.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "mr_enroll_status_ru",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"usercode_from_main_id\":1,\r\n    \"status\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}new_admission/mr_enroll_status_ru.php",
							"host": [
								"{{path}}new_admission"
							],
							"path": [
								"mr_enroll_status_ru.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "mr_enroll_status_ru",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{api_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"usercode_from_main_id\":1,\r\n    \"status\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}new_admission/mr_enroll_status_ru.php?user_role=student",
							"host": [
								"{{path}}new_admission"
							],
							"path": [
								"mr_enroll_status_ru.php"
							],
							"query": [
								{
									"key": "user_role",
									"value": "student"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}