{
	"info": {
		"_postman_id": "d552e082-8f20-4d4c-adff-919f893da8ca",
		"name": "CHECK_NULL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32283581"
	},
	"item": [
		{
			"name": "check_null_fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Define the expected response structure\r",
							"const expectedResponseSchema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"message\": { \"type\": \"string\" },\r",
							"        \"data\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": { \"type\": \"string\" }\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"message\", \"data\"]\r",
							"};\r",
							"\r",
							"// Parse the response body as JSON\r",
							"const responseBodyJson = pm.response.json();\r",
							"\r",
							"// Validate the response body against the expected schema\r",
							"pm.test(\"Response body matches expected schema\", function () {\r",
							"    pm.expect(tv4.validate(responseBodyJson, expectedResponseSchema)).to.be.true;\r",
							"});\r",
							"\r",
							"// Test case for the message\r",
							"pm.test(\"Response message indicates all fields are expected\", function () {\r",
							"    pm.expect(responseBodyJson.message).to.equal(\"All Fields are Expected\");\r",
							"});\r",
							"\r",
							"// Test case for the data array\r",
							"pm.test(\"Response data is empty\", function () {\r",
							"    pm.expect(responseBodyJson.data).to.be.an('array').that.is.empty;\r",
							"});\r",
							"\r",
							"// Test case for response when ID parameter is missing\r",
							"pm.test(\"Response for Missing ID Parameter\", function () {\r",
							"    pm.response.to.have.status(400); // Assuming 400 Bad Request is returned\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.eql({\r",
							"        \"message\": \"Missing ID Parameter\"\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test case for response when ID parameter is invalid\r",
							"pm.test(\"Response for Invalid ID Parameter\", function () {\r",
							"    pm.response.to.have.status(400); // Assuming 400 Bad Request is returned\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.eql({\r",
							"        \"message\": \"Invalid ID Parameter\"\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test case for response when ID does not exist\r",
							"pm.test(\"Response for Non-Existent ID\", function () {\r",
							"    pm.response.to.have.status(404); // Assuming 404 Not Found is returned\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.eql({\r",
							"        \"message\": \"No Record Found\"\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test case for response when there are no null fields for a specific ID\r",
							"pm.test(\"Response for Specific ID with No Null Fields\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.eql({\r",
							"        \"message\": \"No Null Fields\",\r",
							"        \"data\": []\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test case for response when there are some null fields for a specific ID\r",
							"pm.test(\"Response for Specific ID with Some Null Fields\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.eql({\r",
							"        \"message\": \"Missing Fields\",\r",
							"        \"data\": [\r",
							"            \"name\",\r",
							"            \"branch\",\r",
							"            \"phone\"\r",
							"        ]\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test case for internal server error\r",
							"pm.test(\"Response for Internal Server Error\", function () {\r",
							"    pm.response.to.have.status(500); // Assuming 500 Internal Server Error is returned\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.eql({\r",
							"        \"message\": \"Internal Server Error\"\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost/crownCrud/check_null.php?id=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"crownCrud",
						"check_null.php"
					],
					"query": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "updating_null",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"john.doe@example.com\",\r\n    \"branch\": \"cse\",\r\n    \"year\": \"3\",\r\n    \"phone\": \"1234567890\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/crownCrud/check_null.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"crownCrud",
						"check_null.php"
					]
				}
			},
			"response": []
		}
	]
}